From 9ff9634fc515d742f3b94ae611cc5f5b8b88775f Mon Sep 17 00:00:00 2001
From: Popcron-s <hoon0917sjs@naver.com>
Date: Fri, 8 Apr 2016 00:55:25 +0900
Subject: [PATCH] Base Framework ver0.01

---
 Base Library.sdf                                |  Bin 42205184 -> 42205184 bytes
 Base Library.sln                                |   10 +
 Common/Text.cpp                                 |  214 +++
 Common/Text.h                                   |   40 +
 Common/Variable.h                               |   78 +
 GameSystem/Camera.cpp                           |   13 +-
 GameSystem/GameSystem.vcxproj                   |    6 +-
 GameSystem/GameSystem.vcxproj.filters           |   19 +-
 GameSystem/Object.cpp                           |   18 +-
 GameSystem/Object.h                             |    7 +-
 RenderInterface/OpenGL.cpp                      |   18 +-
 RenderInterface/OpenGL.h                        |   26 +-
 RenderInterface/RenderInterface.h               |   59 +-
 RenderInterface/RenderInterface.vcxproj         |    6 +-
 RenderInterface/RenderInterface.vcxproj.filters |   17 +-
 ResourceManager/BMPDecoder.cpp                  |   88 +
 ResourceManager/BaseType.h                      |   52 +
 ResourceManager/Decoder.cpp                     |   47 +
 ResourceManager/Decoder.h                       |   13 +
 ResourceManager/ManagerClass.cpp                |  165 ++
 ResourceManager/ManagerClass.h                  |   29 +
 ResourceManager/PNGDecoder.cpp                  |   62 +
 ResourceManager/PNGDecoder.h                    |   36 +
 ResourceManager/PNGDecoderCRC32.cpp             |   37 +
 ResourceManager/PNGDecoderChunks.cpp            |  206 +++
 ResourceManager/ResourceManager.cpp             |   36 +
 ResourceManager/ResourceManager.h               |   19 +
 ResourceManager/ResourceManager.vcxproj         |  171 ++
 ResourceManager/ResourceManager.vcxproj.filters |   72 +
 ResourceManager/dllMain.cpp                     |   12 +
 patch.diff                                      | 2061 +++++++++++++++++++++++
 31 files changed, 3544 insertions(+), 93 deletions(-)
 create mode 100644 Common/Text.cpp
 create mode 100644 Common/Text.h
 create mode 100644 Common/Variable.h
 create mode 100644 ResourceManager/BMPDecoder.cpp
 create mode 100644 ResourceManager/BaseType.h
 create mode 100644 ResourceManager/Decoder.cpp
 create mode 100644 ResourceManager/Decoder.h
 create mode 100644 ResourceManager/ManagerClass.cpp
 create mode 100644 ResourceManager/ManagerClass.h
 create mode 100644 ResourceManager/PNGDecoder.cpp
 create mode 100644 ResourceManager/PNGDecoder.h
 create mode 100644 ResourceManager/PNGDecoderCRC32.cpp
 create mode 100644 ResourceManager/PNGDecoderChunks.cpp
 create mode 100644 ResourceManager/ResourceManager.cpp
 create mode 100644 ResourceManager/ResourceManager.h
 create mode 100644 ResourceManager/ResourceManager.vcxproj
 create mode 100644 ResourceManager/ResourceManager.vcxproj.filters
 create mode 100644 ResourceManager/dllMain.cpp
 create mode 100644 patch.diff

diff --git a/Base Library.sdf b/Base Library.sdf
index fa96ee36216a7f18ac731799d65ec5489c6936b3..271bd18864349aa44823ac52a71e97c3a685c49f 100644
GIT binary patch
delta 28022
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
YYydU_Wxyt&9B>0306qZERubR;0!gTtX8-^I

delta 45737
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
H$N7H%%YQ}+

diff --git a/Base Library.sln b/Base Library.sln
index 8f1132e..85362d1 100644
--- a/Base Library.sln	
+++ b/Base Library.sln	
@@ -7,6 +7,8 @@ Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "GameSystem", "GameSystem\Ga
 EndProject
 Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "RenderInterface", "RenderInterface\RenderInterface.vcxproj", "{D289CE0D-F960-4B76-B22B-5ED339A44954}"
 EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "ResourceManager", "ResourceManager\ResourceManager.vcxproj", "{BBF0A760-AF65-40BF-B786-73A93D837BBF}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|x64 = Debug|x64
@@ -31,6 +33,14 @@ Global
 		{D289CE0D-F960-4B76-B22B-5ED339A44954}.Release|x64.Build.0 = Release|x64
 		{D289CE0D-F960-4B76-B22B-5ED339A44954}.Release|x86.ActiveCfg = Release|Win32
 		{D289CE0D-F960-4B76-B22B-5ED339A44954}.Release|x86.Build.0 = Release|Win32
+		{BBF0A760-AF65-40BF-B786-73A93D837BBF}.Debug|x64.ActiveCfg = Debug|x64
+		{BBF0A760-AF65-40BF-B786-73A93D837BBF}.Debug|x64.Build.0 = Debug|x64
+		{BBF0A760-AF65-40BF-B786-73A93D837BBF}.Debug|x86.ActiveCfg = Debug|Win32
+		{BBF0A760-AF65-40BF-B786-73A93D837BBF}.Debug|x86.Build.0 = Debug|Win32
+		{BBF0A760-AF65-40BF-B786-73A93D837BBF}.Release|x64.ActiveCfg = Release|x64
+		{BBF0A760-AF65-40BF-B786-73A93D837BBF}.Release|x64.Build.0 = Release|x64
+		{BBF0A760-AF65-40BF-B786-73A93D837BBF}.Release|x86.ActiveCfg = Release|Win32
+		{BBF0A760-AF65-40BF-B786-73A93D837BBF}.Release|x86.Build.0 = Release|Win32
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff --git a/Common/Text.cpp b/Common/Text.cpp
new file mode 100644
index 0000000..c4858e1
--- /dev/null
+++ b/Common/Text.cpp
@@ -0,0 +1,214 @@
+#include "Text.h"
+
+_Text::_Text(){
+	str = 0x00;
+	length = 0;
+}
+
+_Text::_Text(const char* text){
+	length = 0;
+	const char* t_char = text;
+	while(1){
+		if(*t_char == 0x00){
+			break;
+		}
+		++length;
+		t_char += 1;
+	}
+	str = new char[length+1];
+	for(unsigned int i = 0 ; i<(length+1) ; ++i){
+		str[i] = text[i];
+	}
+}
+
+_Text::~_Text(){
+	if(str != 0x00){
+		delete [] str;
+		str = 0x00;
+	}
+	length = 0;
+}
+
+const char* _Text::operator =(const char* text){
+	if(text == 0x00){
+		if(str != 0x00){
+			delete [] str;
+			str = 0x00;
+		}
+		length = 0;
+	
+		return 0x00;
+	}
+
+	char* t_text = 0x00;
+	unsigned int t_length = 0;
+	
+	while(1){
+		if(text[t_length] == 0x00){
+			break;
+		}
+		++t_length;
+	}
+	t_text = new char[t_length+1];
+	for(unsigned int i = 0 ; i<(t_length+1) ; ++i){
+		t_text[i] = text[i];
+	}
+	
+	if(str != 0x00){
+		delete [] str;
+		str = 0x00;
+	}
+
+	str = t_text;
+	length = t_length;
+
+	return str;
+}
+
+//_Text::operator const char*() const{
+//	return str;
+//}
+
+_Text::operator char*() const{
+	return str;
+}
+
+const unsigned int _Text::GetLength(){
+	return length;
+}
+
+//Compare Type : 2 small / 1 equal / 0 large
+
+int _Text::LengthCompare(_Text* text){
+	if(text == 0x00 || str == 0x00){return -1;}
+	if(length > text->GetLength()){
+		return 0;
+	}
+	else if(length < text->GetLength()){
+		return 2;
+	}
+	else{
+		return 1;
+	}
+}
+
+int _Text::SizeCompare(_Text* text){
+	int comp = LengthCompare(text);
+	if(comp != 1){return comp;}
+	for(unsigned int i = 0 ; i<length ; ++i){
+		if(str[i] == (*text)[i]){continue;}
+		else{
+			if(str[i] > (*text)[i]){
+				return 0;
+			}
+			else{
+				return 2;
+			}
+		}
+	}
+	return 1;
+}
+
+bool _Text::operator ==(_Text& text){
+	const int result = SizeCompare(&text);
+	if(result < 0){return false;}
+	if(result == 1){return true;}
+	else{return false;}
+}
+bool _Text::operator !=(_Text& text){
+	const int result = SizeCompare(&text);
+	if(result < 0){return false;}
+	if(result == 1){return false;}
+	else{return true;}
+}
+bool _Text::operator > (_Text& text){
+	const int result = SizeCompare(&text);
+	if(result < 0){return false;}
+	if(result == 0){return true;}
+	else{return false;}
+}
+bool _Text::operator >=(_Text& text){
+	const int result = SizeCompare(&text);
+	if(result < 0){return false;}
+	if(result == 0 || result == 1){return true;}
+	else{return false;}
+}
+bool _Text::operator < (_Text& text){
+	const int result = SizeCompare(&text);
+	if(result < 0){return false;}
+	if(result == 2){return true;}
+	else{return false;}
+}
+bool _Text::operator <=(_Text& text){
+	const int result = SizeCompare(&text);
+	if(result < 0){return false;}
+	if(result == 2 || result == 1){return true;}
+	else{return false;}
+}
+
+bool _Text::operator ==(const char* text){
+	_Text t_text = text;
+	return operator ==(t_text);
+}
+bool _Text::operator !=(const char* text){
+	_Text t_text = text;
+	return operator !=(t_text);
+}
+bool _Text::operator >=(const char* text){
+	_Text t_text = text;
+	return operator >=(t_text);
+}
+bool _Text::operator <=(const char* text){
+	_Text t_text = text;
+	return operator <=(t_text);
+}
+bool _Text::operator < (const char* text){
+	_Text t_text = text;
+	return operator < (t_text);
+}
+bool _Text::operator > (const char* text){
+	_Text t_text = text;
+	return operator > (t_text);
+}
+
+char* _Text::Search(const char* text, const char type){
+	if(text == 0x00){return 0;}
+	char* adr = 0x00;
+	
+	unsigned int t_length = 0;
+	while(1){
+		if(*(text + t_length) == 0x00){break;}
+		++t_length;
+	}
+
+	if(type == 'n' || type == 'N'){
+		for(unsigned int i = 0 ; i<length ; ++i){
+			if(str[i] == text[0]){
+				for(unsigned int j = 0 ; (j<t_length) && (i+j<length) ; ++j){
+					if(str[i+j] != text[j]){break;}
+					if(j == (t_length-1)){
+						adr = (str+i);
+						break;
+					}
+				}
+			}
+			if(adr != 0x00){break;}
+		}
+	}
+	else if(type == 'r' || type == 'R'){
+		for(int i = length-1 ; i>=0 ; --i){
+			if(str[i] == text[t_length-1]){
+				for(unsigned int j = 0 ; (j<t_length) && (i-j>=0) ; ++j){
+					if(str[i-j] != text[(t_length-1)-j]){break;}
+					if(j == (t_length-1)){
+						adr = (str+(i-j));
+						break;
+					}
+				}
+			}
+			if(adr != 0x00){break;}
+		}
+	}
+
+	return adr;
+}
\ No newline at end of file
diff --git a/Common/Text.h b/Common/Text.h
new file mode 100644
index 0000000..9c68888
--- /dev/null
+++ b/Common/Text.h
@@ -0,0 +1,40 @@
+#pragma once
+
+extern "C"{
+	typedef class _Text{
+	private:
+		char* str;
+		unsigned int length;
+
+		int LengthCompare(_Text*);
+		int SizeCompare(_Text*);
+
+	public:
+		_Text();
+		_Text(const char* text);
+		~_Text();
+
+		//operator const char*() const;
+		operator char*() const;
+		const unsigned int GetLength();
+
+		const char* operator =(const char* text);
+	
+		bool operator ==(_Text& text);
+		bool operator !=(_Text& text);
+		bool operator < (_Text& text);
+		bool operator <=(_Text& text);
+		bool operator > (_Text& text);
+		bool operator >=(_Text& text);
+
+		bool operator ==(const char* text);
+		bool operator !=(const char* text);
+		bool operator < (const char* text);
+		bool operator <=(const char* text);
+		bool operator > (const char* text);
+		bool operator >=(const char* text);
+		// +
+		char* Search(const char* text, const char type);
+
+	}TEXT;
+}
diff --git a/Common/Variable.h b/Common/Variable.h
new file mode 100644
index 0000000..cac2d83
--- /dev/null
+++ b/Common/Variable.h
@@ -0,0 +1,78 @@
+#pragma once
+
+#include "Text.h"
+
+#define __x86__
+
+#ifdef __x86__
+typedef float			FLOAT;
+typedef int				INT;
+typedef unsigned int	UINT;
+#else
+typedef double				FLOAT
+#define __int64				INT 
+#define unsigned __int64	UINT
+#endif
+
+extern "C"{
+	typedef struct _vector2{
+		FLOAT x, y;
+	}FLOAT2;
+
+	typedef struct _vector3{
+		FLOAT x, y, z;
+	}FLOAT3;
+
+	typedef struct _vector4{
+		FLOAT x, y, z, w;
+	}FLOAT4;
+
+	typedef struct _matrix2x2{
+		FLOAT _11, _12;
+		FLOAT _21, _22;
+	}FLOAT2x2;
+
+	typedef struct _matrix3x3{
+		FLOAT _11, _12, _13;
+		FLOAT _21, _22, _23;
+		FLOAT _31, _32, _33;
+	}FLOAT3x3;
+
+	typedef struct _matrix4x4{
+		FLOAT _11, _12, _13, _14;
+		FLOAT _21, _22, _23, _24;
+		FLOAT _31, _32, _33, _34;
+		FLOAT _41, _42, _43, _44;
+	}FLOAT4x4;
+
+	typedef struct _defaultvertex{
+		_vector4 pos;
+		_vector4 normal;
+		_vector4 diffuse;
+		_vector2 tex;
+	}_VERTEX;
+
+	typedef struct _defaultobject{
+		_VERTEX* vertex;
+		UINT vertex_num;
+		TEXT* texture;
+		UINT texture_num;
+		FLOAT4x4 world_mat;
+	}_OBJECT;
+
+	typedef struct _defaultlight{
+
+	}_LIGHT;
+
+	typedef struct _defaultcamera{
+		FLOAT4x4 view_mat;
+		FLOAT4x4 proj_mat;
+	}_CAMERA;
+
+	typedef struct _defaultdisplay{
+		UINT x, y;
+		UINT width;
+		UINT height;
+		UINT* buf;
+	}_DISPLAY;
+}
\ No newline at end of file
diff --git a/GameSystem/Camera.cpp b/GameSystem/Camera.cpp
index 8e8582a..8a237da 100644
--- a/GameSystem/Camera.cpp
+++ b/GameSystem/Camera.cpp
@@ -80,7 +80,7 @@ void _CCamera::Render(_DISPLAY* display){
 		obj_list[i].vertex_num = t_node->_node->GetVertexNumber();
 		obj_list[i].vertex = new _VERTEX[obj_list[i].vertex_num];
 		for(UINT j = 0 ; j<(obj_list[i].vertex_num) ; ++j){
-			obj_list[i].vertex[j].vertex.x = t_node->_node->GetVertex()[j].pos.x;
+			/*obj_list[i].vertex[j].vertex.x = t_node->_node->GetVertex()[j].pos.x;
 			obj_list[i].vertex[j].vertex.y = t_node->_node->GetVertex()[j].pos.y;
 			obj_list[i].vertex[j].vertex.z = t_node->_node->GetVertex()[j].pos.z;
 			obj_list[i].vertex[j].vertex.w = t_node->_node->GetVertex()[j].pos.w;
@@ -96,12 +96,13 @@ void _CCamera::Render(_DISPLAY* display){
 			obj_list[i].vertex[j].normal.w = t_node->_node->GetVertex()[j].normal.w;
 
 			obj_list[i].vertex[j].textureUV.x = t_node->_node->GetVertex()[j].tex.x;
-			obj_list[i].vertex[j].textureUV.x = t_node->_node->GetVertex()[j].tex.x;
+			obj_list[i].vertex[j].textureUV.y = t_node->_node->GetVertex()[j].tex.y;*/
+			obj_list[i].vertex[j] = t_node->_node->GetVertex()[j];
 		}
-		obj_list[i].texture_num = 0;//t_node->_node->GetTextureNumber
-		//obj_list[i].texture = new TEXT[obj_list[i].texture_num];
+		obj_list[i].texture_num = t_node->_node->GetTextureNumber();
+		obj_list[i].texture = new TEXT[obj_list[i].texture_num];
 		for(UINT j = 0 ; j<(obj_list[i].texture_num) ; ++j){
-
+			obj_list[i].texture[j] = t_node->_node->GetTexture()[j];
 		}
 		obj_list[i].world_mat._11 = t_node->_node->GetWorldMatrix()._11;
 		obj_list[i].world_mat._12 = t_node->_node->GetWorldMatrix()._12;
@@ -154,7 +155,7 @@ void _CCamera::Render(_DISPLAY* display){
 
 	for(UINT i = 0 ;i<obj_num ; ++i){
 		delete [] (obj_list[i].vertex);
-		//delete [] (obj_list[i].texture);
+		delete [] (obj_list[i].texture);
 	}
 	delete [] obj_list;
 	delete camera;
diff --git a/GameSystem/GameSystem.vcxproj b/GameSystem/GameSystem.vcxproj
index bdcbc92..571a5bc 100644
--- a/GameSystem/GameSystem.vcxproj
+++ b/GameSystem/GameSystem.vcxproj
@@ -146,7 +146,7 @@
     </Link>
   </ItemDefinitionGroup>
   <ItemGroup>
-    <ClCompile Include="..\Text.cpp" />
+    <ClCompile Include="..\Common\Text.cpp" />
     <ClCompile Include="Camera.cpp" />
     <ClCompile Include="dllMain.cpp" />
     <ClCompile Include="GameSystem.cpp" />
@@ -154,13 +154,13 @@
     <ClCompile Include="Object.cpp" />
   </ItemGroup>
   <ItemGroup>
+    <ClInclude Include="..\Common\Text.h" />
+    <ClInclude Include="..\Common\Variable.h" />
     <ClInclude Include="..\RenderInterface\RenderInterface.h" />
-    <ClInclude Include="..\Text.h" />
     <ClInclude Include="GameSystem.h" />
     <ClInclude Include="List.h" />
     <ClInclude Include="MainSystem.h" />
     <ClInclude Include="Object.h" />
-    <ClInclude Include="Variable.h" />
   </ItemGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
   <ImportGroup Label="ExtensionTargets">
diff --git a/GameSystem/GameSystem.vcxproj.filters b/GameSystem/GameSystem.vcxproj.filters
index 415b294..39c5edf 100644
--- a/GameSystem/GameSystem.vcxproj.filters
+++ b/GameSystem/GameSystem.vcxproj.filters
@@ -13,6 +13,9 @@
       <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
       <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
     </Filter>
+    <Filter Include="공용">
+      <UniqueIdentifier>{9f1eb3ee-af3b-4305-ba45-cae513f5c50f}</UniqueIdentifier>
+    </Filter>
   </ItemGroup>
   <ItemGroup>
     <ClCompile Include="dllMain.cpp">
@@ -30,17 +33,14 @@
     <ClCompile Include="Camera.cpp">
       <Filter>소스 파일</Filter>
     </ClCompile>
-    <ClCompile Include="..\Text.cpp">
-      <Filter>소스 파일</Filter>
+    <ClCompile Include="..\Common\Text.cpp">
+      <Filter>공용</Filter>
     </ClCompile>
   </ItemGroup>
   <ItemGroup>
     <ClInclude Include="GameSystem.h">
       <Filter>헤더 파일</Filter>
     </ClInclude>
-    <ClInclude Include="Variable.h">
-      <Filter>헤더 파일</Filter>
-    </ClInclude>
     <ClInclude Include="Object.h">
       <Filter>헤더 파일</Filter>
     </ClInclude>
@@ -50,11 +50,14 @@
     <ClInclude Include="List.h">
       <Filter>헤더 파일</Filter>
     </ClInclude>
-    <ClInclude Include="..\Text.h">
-      <Filter>헤더 파일</Filter>
-    </ClInclude>
     <ClInclude Include="..\RenderInterface\RenderInterface.h">
       <Filter>헤더 파일</Filter>
     </ClInclude>
+    <ClInclude Include="..\Common\Text.h">
+      <Filter>공용</Filter>
+    </ClInclude>
+    <ClInclude Include="..\Common\Variable.h">
+      <Filter>공용</Filter>
+    </ClInclude>
   </ItemGroup>
 </Project>
\ No newline at end of file
diff --git a/GameSystem/Object.cpp b/GameSystem/Object.cpp
index e6a0d57..3c218cd 100644
--- a/GameSystem/Object.cpp
+++ b/GameSystem/Object.cpp
@@ -50,4 +50,20 @@ bool _CObject::SetVertex(_defaultvertex* vertex, UINT num){
 }
 _defaultvertex* _CObject::GetVertex() const{
 	return m_vertex;
-}
\ No newline at end of file
+}
+
+UINT _CObject::GetTextureNumber() const{return m_texture_num;}
+bool _CObject::SetTexture(TEXT* tex, UINT num){
+	if(m_texture != 0x00){
+		delete [] m_texture;
+		m_texture = 0x00;
+		m_texture_num = 0;
+	}
+	m_texture = new TEXT[num];
+	m_texture_num = num;
+	for(UINT i = 0 ; i<num ; ++i){
+		m_texture[i] = tex[i];
+	}
+	return true;
+}
+TEXT* _CObject::GetTexture() const{return m_texture;}
\ No newline at end of file
diff --git a/GameSystem/Object.h b/GameSystem/Object.h
index 8e6d288..2a599fd 100644
--- a/GameSystem/Object.h
+++ b/GameSystem/Object.h
@@ -1,8 +1,8 @@
 #pragma once
 
-#include "Variable.h"
+#include "..\\Common\\Variable.h"
 #include "List.h"
-#include "..\\Text.h"
+#include "..\\Common\\Text.h"
 #include "..\\RenderInterface\\RenderInterface.h"
 /*
 struct _RenderData{
@@ -47,6 +47,9 @@ public:
 	bool SetVertex(_defaultvertex*, UINT);
 	_defaultvertex* GetVertex() const;
 	//get, set texture array
+	UINT GetTextureNumber() const;
+	bool SetTexture(TEXT*, UINT);
+	TEXT* GetTexture() const;
 
 	//create sound set
 	//create input set
diff --git a/RenderInterface/OpenGL.cpp b/RenderInterface/OpenGL.cpp
index e073dc7..f0e36b2 100644
--- a/RenderInterface/OpenGL.cpp
+++ b/RenderInterface/OpenGL.cpp
@@ -22,14 +22,19 @@ bool _COpenGLRenderer::Render(
 			obj_list[i].world_mat._31,obj_list[i].world_mat._32,obj_list[i].world_mat._33,obj_list[i].world_mat._34,
 			obj_list[i].world_mat._41,obj_list[i].world_mat._42,obj_list[i].world_mat._43,obj_list[i].world_mat._44};
 		glLoadMatrixf(world_mat);
-		glMultMatrixf(view_mat);
+		//glMultMatrixf(view_mat);
+		for(UINT j = 0 ; j<obj_list[i].texture_num ; ++j){
+			//glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, GL_RGBA, GL_UNSIGNED_BYTE, buf);
+		}
 		glBegin(GL_TRIANGLE_STRIP);
 			for(UINT j = 0; j<obj_list[i].vertex_num ; ++j){
-				glVertex3f(obj_list[i].vertex[j].vertex.x,obj_list[i].vertex[j].vertex.y,obj_list[i].vertex[j].vertex.z);
+				//glNormal3f();
+				glTexCoord2f(obj_list[i].vertex[j].tex.x, obj_list[i].vertex[j].tex.y);
+				glVertex3f(obj_list[i].vertex[j].pos.x,obj_list[i].vertex[j].pos.y,obj_list[i].vertex[j].pos.z);
 			}
 		glEnd();
 	}
-	glMatrixMode(GL_TEXTURE);
+	//glMatrixMode(GL_TEXTURE);
 	glMatrixMode(GL_PROJECTION);
 	GLfloat proj_mat[16] = {
 		camera->proj_mat._11,camera->proj_mat._12,camera->proj_mat._13,camera->proj_mat._14,
@@ -37,8 +42,8 @@ bool _COpenGLRenderer::Render(
 		camera->proj_mat._31,camera->proj_mat._32,camera->proj_mat._33,camera->proj_mat._34,
 		camera->proj_mat._41,camera->proj_mat._42,camera->proj_mat._43,camera->proj_mat._44
 	};
-	glLoadMatrixf(proj_mat);
-	//glOrtho(-1.0f, 1.0f, -1.0f, 1.0f, -1.0f, 1.0f);
+	//glLoadMatrixf(proj_mat);
+	glOrtho(-1.0f, 1.0f, -1.0f, 1.0f, -1.0f, 1.0f);
 
 	glReadPixels(0,0,width,height,GL_RGBA,GL_UNSIGNED_BYTE,buf);
 	
@@ -55,12 +60,13 @@ bool _COpenGLRenderer::DrawDisplay(UINT width, UINT height, _DISPLAY* display, U
 	for(UINT i = 0 ; i<display_num ; ++i){
 		for(UINT x = display[i].x ; x<width ; ++x){
 			for(UINT y = display[i].y ; y<height ; ++y){
-				buf[(y*width)+x] = display[i].buf[(y*(display[i].width))+x];
+				buf[(y*width)+x] = display[i].buf[((y-display[i].y)*(display[i].width))+(x-display[i].x)];
 			}
 		}
 	}
 	glDrawPixels(width, height, GL_RGBA, GL_UNSIGNED_BYTE, buf);
 	delete [] buf;
 	glFlush();
+	glFlush();
 	return true;
 }
\ No newline at end of file
diff --git a/RenderInterface/OpenGL.h b/RenderInterface/OpenGL.h
index 9f7fd07..37a28e7 100644
--- a/RenderInterface/OpenGL.h
+++ b/RenderInterface/OpenGL.h
@@ -1,9 +1,15 @@
 #pragma once
 
-#include <Windows.h>
+#define WINGDIAPI __declspec(dllimport)
+#define APIENTRY __stdcall
+#define CALLBACK __stdcall
+//#include <Windows.h>
+//#include <stdio.h>
 #include <gl\\GL.h>
 #include <gl\\GLU.h>
 
+#include "..\\ResourceManager\\ResourceManager.h"
+
 #pragma comment(lib, "opengl32.lib")
 #pragma comment(lib, "glu32.lib")
 
@@ -13,8 +19,22 @@ class _COpenGLRenderer : public _CInterface{
 public:
 	_COpenGLRenderer(){
 		glClearColor(1.0f, 0.0f, 1.0f, 1.0f);
-		glDrawBuffer(GL_BACK);
-		glReadBuffer(GL_BACK);
+		//glDrawBuffer(GL_BACK);
+		//glReadBuffer(GL_BACK);
+		//glEnable(GL_LIGHTING);
+		//glEnable(GL_CULL_FACE);
+		//glShadeModel(GL_SMOOTH);
+		//glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
+		AddResource("temp.bmp");
+		glEnable(GL_TEXTURE_2D);
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+		glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
+		UINT tex_width = 0, tex_height = 0, *tex_buf = 0x00;
+		GetResource("temp.bmp", &tex_width, &tex_height, &tex_buf);
+		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, tex_width, tex_height, 0,GL_RGBA, GL_UNSIGNED_BYTE, tex_buf);
 	}
 	~_COpenGLRenderer(){}
 
diff --git a/RenderInterface/RenderInterface.h b/RenderInterface/RenderInterface.h
index fbe6923..6d0abfc 100644
--- a/RenderInterface/RenderInterface.h
+++ b/RenderInterface/RenderInterface.h
@@ -7,64 +7,7 @@
 #pragma comment(lib,"..\\Release\\RenderInterface.lib")
 #endif
 
-#include "..\\Text.h"
-
-#define __x86__
-
-#ifdef __x86__
-typedef float			FLOAT;
-typedef int				INT;
-typedef unsigned int	UINT;
-#else
-typedef double				FLOAT
-#define __int64				INT 
-#define unsigned __int64	UINT
-#endif
-
-extern "C"{
-	struct FLOAT4{
-		FLOAT x,y,z,w;
-	};
-	struct FLOAT2{
-		FLOAT x,y;
-	};
-	struct FLOAT4x4{
-		FLOAT _11,_12,_13,_14;
-		FLOAT _21,_22,_23,_24;
-		FLOAT _31,_32,_33,_34;
-		FLOAT _41,_42,_43,_44;
-	};
-}
-
-extern "C"{
-	struct _VERTEX{
-		FLOAT4 vertex;
-		FLOAT4 diffuse;
-		FLOAT4 normal;
-		FLOAT2 textureUV;
-	};
-	struct _OBJECT{
-		_VERTEX* vertex;
-		UINT vertex_num;
-		TEXT* texture;
-		UINT texture_num;
-		FLOAT4x4 world_mat;
-	};
-	struct _LIGHT{
-
-	};
-	struct _CAMERA{
-		FLOAT4x4 view_mat;
-		FLOAT4x4 proj_mat;
-	};
-
-	struct _DISPLAY{
-		UINT x, y;
-		UINT width;
-		UINT height;
-		UINT* buf;
-	};
-}
+#include "..\\Common\\Variable.h"
 
 extern "C"{
 	RINTER_API bool Render(UINT width, UINT height, UINT* buf, 
diff --git a/RenderInterface/RenderInterface.vcxproj b/RenderInterface/RenderInterface.vcxproj
index d07cd35..eba390b 100644
--- a/RenderInterface/RenderInterface.vcxproj
+++ b/RenderInterface/RenderInterface.vcxproj
@@ -146,14 +146,16 @@
     </Link>
   </ItemDefinitionGroup>
   <ItemGroup>
-    <ClCompile Include="..\Text.cpp" />
+    <ClCompile Include="..\Common\Text.cpp" />
     <ClCompile Include="dllMain.cpp" />
     <ClCompile Include="Interface.cpp" />
     <ClCompile Include="OpenGL.cpp" />
     <ClCompile Include="RenderInterface.cpp" />
   </ItemGroup>
   <ItemGroup>
-    <ClInclude Include="..\Text.h" />
+    <ClInclude Include="..\Common\Text.h" />
+    <ClInclude Include="..\Common\Variable.h" />
+    <ClInclude Include="..\ResourceManager\ResourceManager.h" />
     <ClInclude Include="Interface.h" />
     <ClInclude Include="OpenGL.h" />
     <ClInclude Include="RenderInterface.h" />
diff --git a/RenderInterface/RenderInterface.vcxproj.filters b/RenderInterface/RenderInterface.vcxproj.filters
index 6c5df8f..31f23d2 100644
--- a/RenderInterface/RenderInterface.vcxproj.filters
+++ b/RenderInterface/RenderInterface.vcxproj.filters
@@ -13,6 +13,9 @@
       <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
       <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
     </Filter>
+    <Filter Include="공용">
+      <UniqueIdentifier>{f7791dac-8db7-4aa2-a1c7-146089ad8d78}</UniqueIdentifier>
+    </Filter>
   </ItemGroup>
   <ItemGroup>
     <ClCompile Include="dllMain.cpp">
@@ -21,15 +24,15 @@
     <ClCompile Include="OpenGL.cpp">
       <Filter>소스 파일</Filter>
     </ClCompile>
-    <ClCompile Include="..\Text.cpp">
-      <Filter>소스 파일</Filter>
-    </ClCompile>
     <ClCompile Include="Interface.cpp">
       <Filter>소스 파일</Filter>
     </ClCompile>
     <ClCompile Include="RenderInterface.cpp">
       <Filter>소스 파일</Filter>
     </ClCompile>
+    <ClCompile Include="..\Common\Text.cpp">
+      <Filter>공용</Filter>
+    </ClCompile>
   </ItemGroup>
   <ItemGroup>
     <ClInclude Include="RenderInterface.h">
@@ -41,7 +44,13 @@
     <ClInclude Include="Interface.h">
       <Filter>헤더 파일</Filter>
     </ClInclude>
-    <ClInclude Include="..\Text.h">
+    <ClInclude Include="..\Common\Text.h">
+      <Filter>공용</Filter>
+    </ClInclude>
+    <ClInclude Include="..\Common\Variable.h">
+      <Filter>공용</Filter>
+    </ClInclude>
+    <ClInclude Include="..\ResourceManager\ResourceManager.h">
       <Filter>헤더 파일</Filter>
     </ClInclude>
   </ItemGroup>
diff --git a/ResourceManager/BMPDecoder.cpp b/ResourceManager/BMPDecoder.cpp
new file mode 100644
index 0000000..e05b662
--- /dev/null
+++ b/ResourceManager/BMPDecoder.cpp
@@ -0,0 +1,88 @@
+#include "Decoder.h"
+
+#include <io.h>
+#include <fcntl.h>
+#include <share.h>
+#include <sys\types.h>
+#include <sys\stat.h>
+
+bool BMPDecoder(const char* filename, ImageData** data){
+	if((*data) == 0x00){return false;}
+
+	int fadr = 0;
+	
+	_sopen_s(&fadr, filename, O_RDONLY | O_BINARY, _SH_DENYWR , _S_IREAD);
+
+	if(fadr == 0xFFFFFFFF){return false;}
+
+	unsigned char* buf = new unsigned char[54];
+
+	_read(fadr, buf, 54);
+
+	if(buf[0] != 'B' || buf[1] != 'M'){
+		delete [] buf;
+		buf = 0x00;
+		return false;
+	}
+
+	union d2i{
+		unsigned char c[4];
+		unsigned int i;
+	}temp;
+
+	temp.i = 0x0;
+	temp.c[0] = buf[18];
+	temp.c[1] = buf[19];
+	temp.c[2] = buf[20];
+	temp.c[3] = buf[21];
+
+	(*data)->width = temp.i;
+
+	temp.i = 0x0;
+	temp.c[0] = buf[22];
+	temp.c[1] = buf[23];
+	temp.c[2] = buf[24];
+	temp.c[3] = buf[25];
+
+	(*data)->height = temp.i;
+
+	if((*data)->buf != 0x00){
+		delete [] (*data)->buf;
+		(*data)->buf = 0x00;
+	}
+
+	(*data)->buf = new unsigned int[(*data)->width * (*data)->height];
+
+	temp.i = 0x0;
+	temp.c[0] = buf[34];
+	temp.c[1] = buf[35];
+	temp.c[2] = buf[36];
+	temp.c[3] = buf[37];
+
+	delete [] buf;
+	buf = new unsigned char[temp.i];
+
+	_read(fadr, buf, temp.i);
+
+	_close(fadr);
+
+	int index = ((*data)->width*3)%4;
+	index = ((*data)->width*3) + ((index == 0)?0:(4-index));
+
+	for(int y = ((*data)->height-1) ; y >= 0 ; --y){
+		for(int x = 0 ; x < (*data)->width ; ++x){
+			temp.i = 0x00;
+
+			temp.c[3] = 0xFF; //a
+			temp.c[2] = buf[((-y+((*data)->height-1))*index)+(x*3)+2]; //r
+			temp.c[1] = buf[((-y+((*data)->height-1))*index)+(x*3)+1]; //g
+			temp.c[0] = buf[((-y+((*data)->height-1))*index)+(x*3)]; //b
+			
+			(*data)->buf[(y*(*data)->width)+x] = temp.i;
+		}
+	}
+
+	delete [] buf;
+
+	return true;
+}
\ No newline at end of file
diff --git a/ResourceManager/BaseType.h b/ResourceManager/BaseType.h
new file mode 100644
index 0000000..1cb4174
--- /dev/null
+++ b/ResourceManager/BaseType.h
@@ -0,0 +1,52 @@
+#pragma once
+#include "..\\Common\\Text.h"
+
+/*****************************************************************
+ * _BaseType value type Info
+ * Attention : standardize with upper case
+ * Graphic Type = "IMAGE" / _Image struct
+ * 
+ *
+ *
+ *
+ *****************************************************************/
+
+struct _BaseType{
+public:
+	TEXT type;
+};
+
+typedef struct _Image : public _BaseType{
+public:
+	unsigned int width;
+	unsigned int height;
+	unsigned int* buf;
+
+	_Image(){
+		width = 0; height = 0; buf = 0x00;
+	}
+	~_Image(){
+		if(buf != 0x00){
+			delete [] buf;
+			buf = 0x00;
+		}
+		width = 0; height = 0;
+	}
+}ImageData;
+
+struct _Node{
+	TEXT name;
+	_BaseType* data;
+
+	_Node* LNode;
+	_Node* RNode;
+
+	_Node(){data = 0x00; LNode = 0x00; RNode = 0x00;}
+	~_Node(){
+		if(data != 0x00){
+			delete data;
+			data = 0x00;
+		}
+		LNode = 0x00; RNode = 0x00;
+	}
+};
\ No newline at end of file
diff --git a/ResourceManager/Decoder.cpp b/ResourceManager/Decoder.cpp
new file mode 100644
index 0000000..ccc8f35
--- /dev/null
+++ b/ResourceManager/Decoder.cpp
@@ -0,0 +1,47 @@
+#include "Decoder.h"
+
+#include <io.h>
+#include <memory.h>
+
+bool Decode(const char* filename, _BaseType** data){
+	if(_access_s(filename, 4) != 0){
+		return false;
+	}
+
+	TEXT type = filename;
+	type = type.Search(".", 'r');
+
+	if(type == ".BMP"){
+		if((*data) != 0x00){
+			delete data;
+			data = 0x00;
+		}
+		(*data) = new ImageData;
+		memset((*data), 0x00, sizeof(ImageData));
+		if(!BMPDecoder(filename, (ImageData**)data)){
+			delete (*data);
+			(*data) = 0x00;
+			return false;
+		}
+		(*data)->type = "IMAGE";
+	}
+	else if(type == ".PNG"){
+		if((*data) != 0x00){
+			delete data;
+			data = 0x00;
+		}
+		(*data) = new ImageData;
+		memset((*data), 0x00, sizeof(ImageData));
+		if(!PNGDecoder(filename, (ImageData**)data)){
+			delete (*data);
+			(*data) = 0x00;
+			return false;
+		}
+		(*data)->type = "IMAGE";
+	}
+	else{
+		return false;
+	}
+
+	return true;
+}
\ No newline at end of file
diff --git a/ResourceManager/Decoder.h b/ResourceManager/Decoder.h
new file mode 100644
index 0000000..45bf271
--- /dev/null
+++ b/ResourceManager/Decoder.h
@@ -0,0 +1,13 @@
+#pragma once
+
+#include "BaseType.h"
+
+bool Decode(const char* filename, _BaseType** data);
+
+/*****************************************************
+ * *Image Decoder*
+ *  BMP
+ *  PNG
+ *****************************************************/
+bool BMPDecoder(const char* filename, ImageData** data);
+bool PNGDecoder(const char* filename, ImageData** data);
diff --git a/ResourceManager/ManagerClass.cpp b/ResourceManager/ManagerClass.cpp
new file mode 100644
index 0000000..7e09a6d
--- /dev/null
+++ b/ResourceManager/ManagerClass.cpp
@@ -0,0 +1,165 @@
+#include "ManagerClass.h"
+#include "Decoder.h"
+
+_ResourceManager* _ResourceManager::m_pSingleton = 0x0;
+
+_ResourceManager* _ResourceManager::GetSingleton(){
+	if(m_pSingleton == 0x0){
+		m_pSingleton = new _ResourceManager;
+	}
+	return m_pSingleton;
+}
+void _ResourceManager::Destroy(){
+	if(m_pSingleton != 0x0){
+		m_pSingleton->RemoveAll();
+		delete m_pSingleton;
+		m_pSingleton = 0x0;
+	}
+}
+
+_ResourceManager::_ResourceManager(){
+	m_Count = 0;
+	m_Head = 0x00;
+}
+_ResourceManager::~_ResourceManager(){
+	RemoveAll();
+}
+
+void _ResourceManager::TextNormalize(char* text){
+	for(int i = 0 ; text[i] != 0x00 ; ++i){
+		if('a' <= text[i] && text[i] <= 'z'){
+			text[i] -= 32;
+		}
+	}
+}
+
+bool _ResourceManager::Insert(const char* text){
+	TEXT nor_text = text;
+	TextNormalize(nor_text);
+
+	_BaseType* data = 0x00;
+
+	if(!Decode(nor_text, &data)){return false;} 
+
+	_Node** t_node = &m_Head;
+
+	while((*t_node) != 0x00){
+		if(nor_text < (*t_node)->name){t_node = &((*t_node)->LNode);}
+		else if(nor_text > (*t_node)->name){t_node = &((*t_node)->RNode);}
+		else{
+			if(data != 0x00){
+				delete data;
+				data = 0x00;
+			}
+			return false;
+		}
+	}
+
+	(*t_node) = new _Node;
+	(*t_node)->name = (char*)nor_text;
+	(*t_node)->data = data; 
+	(*t_node)->LNode = 0x00;
+	(*t_node)->RNode = 0x00;
+
+	++m_Count;
+
+	return true;
+}
+
+bool _ResourceManager::Remove(const char* text){
+	TEXT nor_text = text;
+	TextNormalize(nor_text);
+
+	_Node** t_node = &m_Head;
+	while((*t_node) != 0x00){
+		if(nor_text < (*t_node)->name){t_node = &((*t_node)->LNode);}
+		else if(nor_text > (*t_node)->name){t_node = &((*t_node)->RNode);}
+		else{
+			if(((*t_node)->LNode != 0x00) && ((*t_node)->RNode != 0x00)){
+				_Node** t_node2 = t_node;
+				t_node2 = &((*t_node2)->RNode);
+				if((*t_node2)->LNode != 0x00){
+					while((*t_node2)->LNode != 0x00 || (*t_node2)->RNode != 0x00){
+						if((*t_node2)->LNode != 0x00){t_node2 = &((*t_node2)->LNode);}
+						else{t_node2 = &((*t_node2)->RNode);}
+					}
+					(*t_node2)->RNode = (*t_node)->RNode;
+				}
+				(*t_node2)->LNode = (*t_node)->LNode;
+				_Node* t_node3 = (*t_node2);
+				(*t_node2) = 0x00;
+				delete (*t_node);
+				(*t_node) = t_node3;
+			}
+			else if((*t_node)->LNode != 0x00){
+				_Node* t_node2 = (*t_node);
+				(*t_node) = (*t_node)->LNode;
+				delete t_node2;
+				t_node2 = 0x00;
+			}
+			else if((*t_node)->RNode != 0x00){
+				_Node* t_node2 = (*t_node);
+				(*t_node) = (*t_node)->RNode;
+				delete t_node2;
+				t_node2 = 0x00;
+			}
+			else{
+				delete (*t_node);
+				(*t_node) = 0x00;
+			}
+
+			--m_Count;
+			return true;
+		}
+	}
+
+	return false;
+}
+
+bool _ResourceManager::RemoveAll(){
+	while(m_Count > 0){
+		Remove(m_Head->name);
+	}
+	return true;
+}
+
+bool _ResourceManager::GetData(const char* text, _BaseType** data){
+	TEXT nor_text = text;
+	TextNormalize(nor_text);
+
+	_Node* t_node = m_Head;
+
+	while(t_node != 0x00){
+		if(nor_text < t_node->name){t_node = t_node->LNode;}
+		else if(nor_text > t_node->name){t_node = t_node->RNode;}
+		else{break;}
+	}
+
+	if(t_node == 0x00){return false;}
+
+	(*data) = t_node->data;
+	return true;
+}
+
+_BaseType* _ResourceManager::GetData(const char* text){
+	_BaseType* data = 0x00;
+	TEXT nor_text = text;
+	TextNormalize(nor_text);
+
+	_Node* t_node = m_Head;
+
+	while(t_node != 0x00){
+		if(nor_text < t_node->name){t_node = t_node->LNode;}
+		else if(nor_text > t_node->name){t_node = t_node->RNode;}
+		else{break;}
+	}
+
+	if(t_node == 0x00){return 0x00;}
+
+	data = t_node->data;
+	return data;
+}
+
+void _ResourceManager::Sort(){
+
+}
\ No newline at end of file
diff --git a/ResourceManager/ManagerClass.h b/ResourceManager/ManagerClass.h
new file mode 100644
index 0000000..e2cc5ff
--- /dev/null
+++ b/ResourceManager/ManagerClass.h
@@ -0,0 +1,29 @@
+#pragma once
+
+#include "BaseType.h"
+
+class _ResourceManager{
+private:
+	static _ResourceManager* m_pSingleton;
+
+	_ResourceManager();
+	~_ResourceManager();
+
+	unsigned int m_Count;
+	_Node* m_Head;
+
+public:
+	static _ResourceManager* GetSingleton();
+	static void Destroy();
+
+	void TextNormalize(char*);
+
+	bool Insert(const char*);
+	bool Remove(const char*);
+	bool RemoveAll();
+
+	bool GetData(const char*, _BaseType**);
+	_BaseType* GetData(const char*);
+
+	void Sort();
+};
\ No newline at end of file
diff --git a/ResourceManager/PNGDecoder.cpp b/ResourceManager/PNGDecoder.cpp
new file mode 100644
index 0000000..82c77cb
--- /dev/null
+++ b/ResourceManager/PNGDecoder.cpp
@@ -0,0 +1,62 @@
+#include "Decoder.h"
+#include "PNGDecoder.h"
+
+bool PNGDecoder(const char* filename, ImageData** data){
+	if((*data) == 0x00){return false;}
+
+	int fadr = 0;
+	
+	_sopen_s(&fadr, filename, O_RDONLY | O_BINARY, _SH_DENYWR , _S_IREAD);
+
+	if(fadr == 0xFFFFFFFF){return false;}
+
+	long file_len = _filelength(fadr);
+
+	unsigned char* buf = new unsigned char[file_len];
+
+	_read(fadr, buf, file_len);
+	//89 50 4E 47 0D 0A 1A 0A 
+	if(buf[0] != 0x89 || buf[1] != 0x50 || buf[2] != 0x4E || buf[3] != 0x47 || 
+	   buf[4] != 0x0D || buf[5] != 0x0A || buf[6] != 0x1A || buf[7] != 0x0A ){
+		delete [] buf;
+		buf = 0x00;
+		return false;
+	}
+
+	IHDR ihdr;
+	memset(&ihdr, 0x00, sizeof(IHDR));
+	
+	for(int i = 8 ; i < (file_len-3) ; ++i){
+		const char ctype[5] = {buf[i], buf[i+1], buf[i+2], buf[i+3], 0x00};
+		TEXT type = ctype;
+			
+		//Critical chunks
+		if(type == "IHDR" || type == "PLTE" || 
+		   type == "IDAT" || type == "IEND" || 
+		//Ancillary chunks
+		//Transparency Info.
+		   type == "tRNS" || 
+		//Color Space Info.
+		   type == "cHRM" || type == "gAMA" || type == "iCCP" || 
+		   type == "sBIT" || type == "sRGB" || 
+		//Text Info.
+		   type == "iTXt" || type == "tEXt" || type == "zTXt" || 
+		//etc... Info.
+		   type == "bkGD" || type == "hIST" || type == "pHYs" || 
+		   type == "sPLT" || 
+		//Time Info
+		   type == "tTME"){
+				if(!ChunksAnalyzer(buf, &i, &ihdr,
+					&((*data)->width), &((*data)->height), &((*data)->buf))){
+					delete [] buf;
+					return false;
+				}
+		}
+	}
+
+	delete [] buf;
+
+	_close(fadr);
+
+	return true;
+}
diff --git a/ResourceManager/PNGDecoder.h b/ResourceManager/PNGDecoder.h
new file mode 100644
index 0000000..278685f
--- /dev/null
+++ b/ResourceManager/PNGDecoder.h
@@ -0,0 +1,36 @@
+#pragma once
+
+#include <io.h>
+#include <fcntl.h>
+#include <share.h>
+#include <sys\types.h>
+#include <sys\stat.h>
+
+#include <string.h>
+
+struct IHDR{
+	unsigned int width;
+	unsigned int height;
+	unsigned char bit_depth;
+	unsigned char color_type;
+	unsigned char compress_type;
+	unsigned char filter_type;
+	unsigned char interlace_type;
+};
+
+union CMFnFLG{
+	unsigned char c[2];
+	unsigned short s;
+};
+
+union d2i{
+	unsigned char c[4];
+	unsigned int i;
+};
+
+bool CRC32(unsigned char* buf, unsigned int len);
+
+//bool IHDRChunk(unsigned char* buf, IHDR* ihdr);
+
+bool ChunksAnalyzer(unsigned char* buf, int* pos, IHDR* ihdr,
+					unsigned int* width, unsigned int* height, unsigned int** g_buf);
\ No newline at end of file
diff --git a/ResourceManager/PNGDecoderCRC32.cpp b/ResourceManager/PNGDecoderCRC32.cpp
new file mode 100644
index 0000000..4b6bbd3
--- /dev/null
+++ b/ResourceManager/PNGDecoderCRC32.cpp
@@ -0,0 +1,37 @@
+#include "PNGDecoder.h"
+#include <Windows.h>
+
+bool CRC32(unsigned char* buf, unsigned int len){
+	unsigned int table[256] = {
+		0x00000000,  0x77073096,  0xEE0E612C,  0x990951BA,  0x076DC419,  0x706AF48F,  0xE963A535,  0x9E6495A3,  0x0EDB8832,  0x79DCB8A4,  0xE0D5E91E,  0x97D2D988,  0x09B64C2B,  0x7EB17CBD,  0xE7B82D07,  0x90BF1D91,  
+		0x1DB71064,  0x6AB020F2,  0xF3B97148,  0x84BE41DE,  0x1ADAD47D,  0x6DDDE4EB,  0xF4D4B551,  0x83D385C7,  0x136C9856,  0x646BA8C0,  0xFD62F97A,  0x8A65C9EC,  0x14015C4F,  0x63066CD9,  0xFA0F3D63,  0x8D080DF5,  
+		0x3B6E20C8,  0x4C69105E,  0xD56041E4,  0xA2677172,  0x3C03E4D1,  0x4B04D447,  0xD20D85FD,  0xA50AB56B,  0x35B5A8FA,  0x42B2986C,  0xDBBBC9D6,  0xACBCF940,  0x32D86CE3,  0x45DF5C75,  0xDCD60DCF,  0xABD13D59,  
+		0x26D930AC,  0x51DE003A,  0xC8D75180,  0xBFD06116,  0x21B4F4B5,  0x56B3C423,  0xCFBA9599,  0xB8BDA50F,  0x2802B89E,  0x5F058808,  0xC60CD9B2,  0xB10BE924,  0x2F6F7C87,  0x58684C11,  0xC1611DAB,  0xB6662D3D,  
+		0x76DC4190,  0x01DB7106,  0x98D220BC,  0xEFD5102A,  0x71B18589,  0x06B6B51F,  0x9FBFE4A5,  0xE8B8D433,  0x7807C9A2,  0x0F00F934,  0x9609A88E,  0xE10E9818,  0x7F6A0DBB,  0x086D3D2D,  0x91646C97,  0xE6635C01,  
+		0x6B6B51F4,  0x1C6C6162,  0x856530D8,  0xF262004E,  0x6C0695ED,  0x1B01A57B,  0x8208F4C1,  0xF50FC457,  0x65B0D9C6,  0x12B7E950,  0x8BBEB8EA,  0xFCB9887C,  0x62DD1DDF,  0x15DA2D49,  0x8CD37CF3,  0xFBD44C65,  
+		0x4DB26158,  0x3AB551CE,  0xA3BC0074,  0xD4BB30E2,  0x4ADFA541,  0x3DD895D7,  0xA4D1C46D,  0xD3D6F4FB,  0x4369E96A,  0x346ED9FC,  0xAD678846,  0xDA60B8D0,  0x44042D73,  0x33031DE5,  0xAA0A4C5F,  0xDD0D7CC9,  
+		0x5005713C,  0x270241AA,  0xBE0B1010,  0xC90C2086,  0x5768B525,  0x206F85B3,  0xB966D409,  0xCE61E49F,  0x5EDEF90E,  0x29D9C998,  0xB0D09822,  0xC7D7A8B4,  0x59B33D17,  0x2EB40D81,  0xB7BD5C3B,  0xC0BA6CAD,  
+		0xEDB88320,  0x9ABFB3B6,  0x03B6E20C,  0x74B1D29A,  0xEAD54739,  0x9DD277AF,  0x04DB2615,  0x73DC1683,  0xE3630B12,  0x94643B84,  0x0D6D6A3E,  0x7A6A5AA8,  0xE40ECF0B,  0x9309FF9D,  0x0A00AE27,  0x7D079EB1,  
+		0xF00F9344,  0x8708A3D2,  0x1E01F268,  0x6906C2FE,  0xF762575D,  0x806567CB,  0x196C3671,  0x6E6B06E7,  0xFED41B76,  0x89D32BE0,  0x10DA7A5A,  0x67DD4ACC,  0xF9B9DF6F,  0x8EBEEFF9,  0x17B7BE43,  0x60B08ED5,  
+		0xD6D6A3E8,  0xA1D1937E,  0x38D8C2C4,  0x4FDFF252,  0xD1BB67F1,  0xA6BC5767,  0x3FB506DD,  0x48B2364B,  0xD80D2BDA,  0xAF0A1B4C,  0x36034AF6,  0x41047A60,  0xDF60EFC3,  0xA867DF55,  0x316E8EEF,  0x4669BE79,  
+		0xCB61B38C,  0xBC66831A,  0x256FD2A0,  0x5268E236,  0xCC0C7795,  0xBB0B4703,  0x220216B9,  0x5505262F,  0xC5BA3BBE,  0xB2BD0B28,  0x2BB45A92,  0x5CB36A04,  0xC2D7FFA7,  0xB5D0CF31,  0x2CD99E8B,  0x5BDEAE1D,  
+		0x9B64C2B0,  0xEC63F226,  0x756AA39C,  0x026D930A,  0x9C0906A9,  0xEB0E363F,  0x72076785,  0x05005713,  0x95BF4A82,  0xE2B87A14,  0x7BB12BAE,  0x0CB61B38,  0x92D28E9B,  0xE5D5BE0D,  0x7CDCEFB7,  0x0BDBDF21,  
+		0x86D3D2D4,  0xF1D4E242,  0x68DDB3F8,  0x1FDA836E,  0x81BE16CD,  0xF6B9265B,  0x6FB077E1,  0x18B74777,  0x88085AE6,  0xFF0F6A70,  0x66063BCA,  0x11010B5C,  0x8F659EFF,  0xF862AE69,  0x616BFFD3,  0x166CCF45,  
+		0xA00AE278,  0xD70DD2EE,  0x4E048354,  0x3903B3C2,  0xA7672661,  0xD06016F7,  0x4969474D,  0x3E6E77DB,  0xAED16A4A,  0xD9D65ADC,  0x40DF0B66,  0x37D83BF0,  0xA9BCAE53,  0xDEBB9EC5,  0x47B2CF7F,  0x30B5FFE9,  
+		0xBDBDF21C,  0xCABAC28A,  0x53B39330,  0x24B4A3A6,  0xBAD03605,  0xCDD70693,  0x54DE5729,  0x23D967BF,  0xB3667A2E,  0xC4614AB8,  0x5D681B02,  0x2A6F2B94,  0xB40BBE37,  0xC30C8EA1,  0x5A05DF1B,  0x2D02EF8D
+	};
+
+	unsigned int crc = ~0;
+	
+	for(int i = 4 ; i<(len-4) ; ++i){
+		crc = table[(crc&0xFF)^buf[i]] ^ (crc>>8);
+	}
+	
+	crc = ~crc;
+
+	if(crc != ((buf[len-4]<<24) | (buf[len-3]<<16) | (buf[len-2]<<8) | buf[len-1])){
+		return false;
+	}
+
+	return true;
+}
\ No newline at end of file
diff --git a/ResourceManager/PNGDecoderChunks.cpp b/ResourceManager/PNGDecoderChunks.cpp
new file mode 100644
index 0000000..c7e0543
--- /dev/null
+++ b/ResourceManager/PNGDecoderChunks.cpp
@@ -0,0 +1,206 @@
+#include "PNGDecoder.h"
+
+#define ChunkNametoUINT(s1, s2, s3, s4) ((s1<<24) | (s2<<16) | (s3<<8) | (s4))
+
+bool IHDRChunk(unsigned char* buf, unsigned int buf_len, IHDR* ihdr){
+	d2i temp = {};
+
+	temp.c[3] = buf[8]; temp.c[2] = buf[9]; temp.c[1] = buf[10]; temp.c[0] = buf[11];
+	ihdr->width = temp.i;
+
+	temp.c[3] = buf[12]; temp.c[2] = buf[13]; temp.c[1] = buf[14]; temp.c[0] = buf[15];
+	ihdr->height= temp.i;
+
+	ihdr->bit_depth      = buf[16];
+	ihdr->color_type     = buf[17];
+	ihdr->compress_type  = buf[18];
+	ihdr->filter_type    = buf[19];
+	ihdr->interlace_type = buf[20];
+
+	return CRC32(buf, buf_len);
+}
+
+#include <Windows.h>
+
+bool Adler32(unsigned char* buf, unsigned int st_pos, unsigned int buf_len, unsigned int check_value){
+	unsigned int a = 1;
+	unsigned int b = 0;
+
+	unsigned int adler = 0;
+
+	for(int i = st_pos ; i<buf_len ; ++i){
+		a = (a+buf[i]) % 65521;
+		b = (a+b) % 65521;
+	}
+
+	adler = (b<<16) + a;
+
+	if(adler != check_value){
+		char str[256] = "";
+		wsprintfA(str, "%08X\n%08X\n%08X\n%08X", adler, check_value, a, b);
+		::MessageBoxA(NULL, str, "adler32 error", MB_OK);
+		return false;
+	}
+	
+	return true;
+}
+
+bool IDATChunk(unsigned char* buf, unsigned int buf_len, IHDR* ihdr, CMFnFLG* cnf, unsigned int** g_buf, unsigned int* g_pos){
+	if((*g_buf) == 0x00){return false;}
+	if(ihdr == 0x00){return false;}
+
+	int i = 8;
+	
+	if((*cnf).s == 0){
+		(*cnf).c[1] = buf[8];
+		(*cnf).c[0] = buf[9];
+		if(((*cnf).s%31) != 0){
+			::MessageBoxA(NULL, "no equel compress header", "PNG error", MB_OK);
+			return false;
+		}
+		i += 2;
+	}
+
+	if(((*cnf).c[0] & 32) != 0){
+		i += 4;
+	}
+
+	unsigned int st_pos = *g_pos;
+
+	bool bit[8] = {};
+
+	//for(int j = 7 ; j>=0 ; --j){
+	for(int j = 0 ; j<8 ; ++j){
+		bit[j] = ((buf[i])>>j)&1;
+	}
+
+	if(bit[0] == 0){
+		::MessageBoxA(NULL, "Last Block", "PNG", MB_OK);
+	}
+	else{
+		::MessageBoxA(NULL, "Block", "PNG", MB_OK);
+	}
+	
+	switch(bit[2]<<1 | bit[1]){
+	case 0:
+		{
+			i += 4;
+			d2i color = {};
+			for( ; i<(buf_len-8) ; i+=1, ++(*g_pos)){
+				color.c[3] = 0xFF;
+				color.c[2] = buf[i];
+				color.c[1] = buf[i];
+				color.c[0] = buf[i];
+				(*g_buf)[*g_pos] = color.i;
+				if(*g_pos >= ihdr->width * ihdr->height){
+					break;
+				}
+				if((*g_pos)%ihdr->width == (ihdr->width-1)){
+					i += (ihdr->width%4 == 0)?0:4-(ihdr->width%4);
+				}
+			}
+		}
+		break;
+	case 1:
+		::MessageBoxA(NULL, "Fixed Huffman", "PNG", MB_OK);
+		break;
+	case 2:
+		::MessageBoxA(NULL, "Dynamic Huffman", "PNG", MB_OK);
+		break;
+	case 3:
+		::MessageBoxA(NULL, "Error", "PNG", MB_OK);
+		break;
+	}
+	
+	/*if(!Adler32((*g_buf), st_pos, (*g_pos)-st_pos, 
+		(buf[buf_len-8]<<24) | (buf[buf_len-7]<<16) | (buf[buf_len-6]<<8) | buf[buf_len-5])){
+		return false;
+	}*/
+
+	return CRC32(buf, buf_len);
+}
+
+bool ChunksAnalyzer(unsigned char* buf, int* pos, IHDR* ihdr,
+					unsigned int* width, unsigned int* height, unsigned int** g_buf){
+	
+	d2i len = {};
+	
+	len.c[3] = buf[(*pos)-4];
+	len.c[2] = buf[(*pos)-3];
+	len.c[1] = buf[(*pos)-2];
+	len.c[0] = buf[(*pos)-1];
+
+	d2i chunk = {};
+
+	chunk.c[3] = buf[(*pos)];
+	chunk.c[2] = buf[(*pos)+1];
+	chunk.c[1] = buf[(*pos)+2];
+	chunk.c[0] = buf[(*pos)+3];
+
+	unsigned char* t_buf = new unsigned char[12+len.i];
+	for(int i = 0 ; i<(12+len.i) ; ++i){
+		t_buf[i] = buf[((*pos)-4)+i];
+	}
+	bool b = false;
+	switch(chunk.i){
+	case ChunkNametoUINT('I','H','D','R'):
+		b = IHDRChunk(t_buf, 12+len.i, ihdr);
+		if(b){
+			*width = ihdr->width;
+			*height = ihdr->height;
+			if((*g_buf) != 0x00){
+				delete [] (*g_buf);
+				(*g_buf) = 0x00;
+			}
+			*g_buf = new unsigned int[(*width)*(*height)];
+			memset((*g_buf), 0xCD, sizeof(unsigned int)*(*width)*(*height));
+		}
+		break;
+	case ChunkNametoUINT('I','D','A','T'):
+		{
+			CMFnFLG cnf = {};
+			unsigned int g_pos = 0;
+			while(1){
+				b = IDATChunk(t_buf, 12+len.i, ihdr, &cnf, g_buf, &g_pos);
+				if(b == false){break;}
+				chunk.c[3] = buf[(*pos)+len.i+12];
+				chunk.c[2] = buf[(*pos)+len.i+12+1];
+				chunk.c[1] = buf[(*pos)+len.i+12+2];
+				chunk.c[0] = buf[(*pos)+len.i+12+3];
+				if(chunk.i == ChunkNametoUINT('I','D','A','T')){
+					delete [] t_buf;
+					(*pos) += (len.i+12);
+
+					len.c[3] = buf[(*pos)-4];
+					len.c[2] = buf[(*pos)-3];
+					len.c[1] = buf[(*pos)-2];
+					len.c[0] = buf[(*pos)-1];
+
+					t_buf = new unsigned char[12+len.i];
+					for(int i = 0 ; i<(12+len.i) ; ++i){
+						t_buf[i] = buf[((*pos)-4)+i];
+					}
+				}
+				else{
+					break;
+				}
+			}
+		}
+		break;
+	case ChunkNametoUINT('I','E','N','D'):
+		b = CRC32(t_buf, 12+len.i);
+		break;
+	default:
+		b = CRC32(t_buf, 12+len.i);
+		break;
+	}
+	
+	delete [] t_buf;
+	
+	if(!b){
+		return false;
+	}
+
+	(*pos) += (len.i+8);
+	return true;
+}
diff --git a/ResourceManager/ResourceManager.cpp b/ResourceManager/ResourceManager.cpp
new file mode 100644
index 0000000..4aba863
--- /dev/null
+++ b/ResourceManager/ResourceManager.cpp
@@ -0,0 +1,36 @@
+#include "ResourceManager.h"
+
+_BaseType* GetResource(const char* filename){
+	return _ResourceManager::GetSingleton()->GetData(filename);
+}
+
+bool GetResource(const char* filename, 
+	unsigned int* width, unsigned int* height, unsigned int** buf){
+		_BaseType* data = 0x00;
+		if(_ResourceManager::GetSingleton()->GetData(filename, &data)){
+			if(data->type != "IMAGE"){return false;}
+			*width = ((ImageData*)data)->width;
+			*height = ((ImageData*)data)->height;
+			(*buf) = ((ImageData*)data)->buf;
+			return true;
+		}
+		else{
+			return false;
+		}
+}
+
+bool AddResource(const char* filename){
+	return _ResourceManager::GetSingleton()->Insert(filename);
+}
+
+bool RemoveResource(const char* filename){
+	return _ResourceManager::GetSingleton()->Remove(filename);
+}
+
+bool RemoveAllResource(){
+	return _ResourceManager::GetSingleton()->RemoveAll();
+}
+
+void SortResource(){
+	return _ResourceManager::GetSingleton()->Sort();
+}
\ No newline at end of file
diff --git a/ResourceManager/ResourceManager.h b/ResourceManager/ResourceManager.h
new file mode 100644
index 0000000..dabf012
--- /dev/null
+++ b/ResourceManager/ResourceManager.h
@@ -0,0 +1,19 @@
+#pragma once
+
+#ifdef RESOURCEMANAGER_EXPORTS
+#define RMANAG_API __declspec(dllexport)
+#include "ManagerClass.h"
+#else
+#define RMANAG_API __declspec(dllimport)
+#pragma comment(lib, "..\\Release\\ResourceManager.lib")
+#endif
+
+extern "C"{
+	//RMANAG_API _BaseType* GetResource(const char*);
+	RMANAG_API bool GetResource(const char*, 
+		unsigned int* width, unsigned int* height, unsigned int** buf);
+	RMANAG_API bool AddResource(const char*);
+	RMANAG_API bool RemoveResource(const char*);
+	RMANAG_API bool RemoveAllResource();
+	RMANAG_API void SortResource();
+}
\ No newline at end of file
diff --git a/ResourceManager/ResourceManager.vcxproj b/ResourceManager/ResourceManager.vcxproj
new file mode 100644
index 0000000..3a0d6ec
--- /dev/null
+++ b/ResourceManager/ResourceManager.vcxproj
@@ -0,0 +1,171 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Debug|Win32">
+      <Configuration>Debug</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|Win32">
+      <Configuration>Release</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Debug|x64">
+      <Configuration>Debug</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{BBF0A760-AF65-40BF-B786-73A93D837BBF}</ProjectGuid>
+    <Keyword>Win32Proj</Keyword>
+    <RootNamespace>ResourceManager</RootNamespace>
+    <WindowsTargetPlatformVersion>8.1</WindowsTargetPlatformVersion>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
+    <ConfigurationType>DynamicLibrary</ConfigurationType>
+    <UseDebugLibraries>true</UseDebugLibraries>
+    <PlatformToolset>v140</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
+    <ConfigurationType>DynamicLibrary</ConfigurationType>
+    <UseDebugLibraries>false</UseDebugLibraries>
+    <PlatformToolset>v140</PlatformToolset>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
+    <ConfigurationType>DynamicLibrary</ConfigurationType>
+    <UseDebugLibraries>true</UseDebugLibraries>
+    <PlatformToolset>v140</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>DynamicLibrary</ConfigurationType>
+    <UseDebugLibraries>false</UseDebugLibraries>
+    <PlatformToolset>v140</PlatformToolset>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Label="Shared">
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <LinkIncremental>false</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <LinkIncremental>false</LinkIncremental>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <ClCompile>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <WarningLevel>Level3</WarningLevel>
+      <Optimization>Disabled</Optimization>
+      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;_USRDLL;RESOURCEMANAGER_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <SDLCheck>true</SDLCheck>
+    </ClCompile>
+    <Link>
+      <SubSystem>Windows</SubSystem>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <ClCompile>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <WarningLevel>Level3</WarningLevel>
+      <Optimization>Disabled</Optimization>
+      <PreprocessorDefinitions>_DEBUG;_WINDOWS;_USRDLL;RESOURCEMANAGER_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <SDLCheck>true</SDLCheck>
+    </ClCompile>
+    <Link>
+      <SubSystem>Windows</SubSystem>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <ClCompile>
+      <WarningLevel>Level3</WarningLevel>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <Optimization>MaxSpeed</Optimization>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;RESOURCEMANAGER_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <SDLCheck>true</SDLCheck>
+    </ClCompile>
+    <Link>
+      <SubSystem>Windows</SubSystem>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <WarningLevel>Level3</WarningLevel>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <Optimization>MaxSpeed</Optimization>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <PreprocessorDefinitions>NDEBUG;_WINDOWS;_USRDLL;RESOURCEMANAGER_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <SDLCheck>true</SDLCheck>
+    </ClCompile>
+    <Link>
+      <SubSystem>Windows</SubSystem>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClInclude Include="..\Common\Text.h" />
+    <ClInclude Include="..\Common\Variable.h" />
+    <ClInclude Include="BaseType.h" />
+    <ClInclude Include="Decoder.h" />
+    <ClInclude Include="ManagerClass.h" />
+    <ClInclude Include="PNGDecoder.h" />
+    <ClInclude Include="ResourceManager.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\Common\Text.cpp" />
+    <ClCompile Include="BMPDecoder.cpp" />
+    <ClCompile Include="Decoder.cpp" />
+    <ClCompile Include="dllMain.cpp" />
+    <ClCompile Include="ManagerClass.cpp" />
+    <ClCompile Include="PNGDecoder.cpp" />
+    <ClCompile Include="PNGDecoderChunks.cpp" />
+    <ClCompile Include="PNGDecoderCRC32.cpp" />
+    <ClCompile Include="ResourceManager.cpp" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/ResourceManager/ResourceManager.vcxproj.filters b/ResourceManager/ResourceManager.vcxproj.filters
new file mode 100644
index 0000000..7a3a660
--- /dev/null
+++ b/ResourceManager/ResourceManager.vcxproj.filters
@@ -0,0 +1,72 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="소스 파일">
+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+    </Filter>
+    <Filter Include="헤더 파일">
+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+      <Extensions>h;hh;hpp;hxx;hm;inl;inc;xsd</Extensions>
+    </Filter>
+    <Filter Include="리소스 파일">
+      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
+      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
+    </Filter>
+    <Filter Include="공용">
+      <UniqueIdentifier>{66feaf24-3b4f-4810-b256-36dfad965906}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="BaseType.h">
+      <Filter>헤더 파일</Filter>
+    </ClInclude>
+    <ClInclude Include="Decoder.h">
+      <Filter>헤더 파일</Filter>
+    </ClInclude>
+    <ClInclude Include="PNGDecoder.h">
+      <Filter>헤더 파일</Filter>
+    </ClInclude>
+    <ClInclude Include="ManagerClass.h">
+      <Filter>헤더 파일</Filter>
+    </ClInclude>
+    <ClInclude Include="ResourceManager.h">
+      <Filter>헤더 파일</Filter>
+    </ClInclude>
+    <ClInclude Include="..\Common\Text.h">
+      <Filter>공용</Filter>
+    </ClInclude>
+    <ClInclude Include="..\Common\Variable.h">
+      <Filter>공용</Filter>
+    </ClInclude>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="BMPDecoder.cpp">
+      <Filter>소스 파일</Filter>
+    </ClCompile>
+    <ClCompile Include="Decoder.cpp">
+      <Filter>소스 파일</Filter>
+    </ClCompile>
+    <ClCompile Include="PNGDecoder.cpp">
+      <Filter>소스 파일</Filter>
+    </ClCompile>
+    <ClCompile Include="PNGDecoderChunks.cpp">
+      <Filter>소스 파일</Filter>
+    </ClCompile>
+    <ClCompile Include="PNGDecoderCRC32.cpp">
+      <Filter>소스 파일</Filter>
+    </ClCompile>
+    <ClCompile Include="ManagerClass.cpp">
+      <Filter>소스 파일</Filter>
+    </ClCompile>
+    <ClCompile Include="ResourceManager.cpp">
+      <Filter>소스 파일</Filter>
+    </ClCompile>
+    <ClCompile Include="dllMain.cpp">
+      <Filter>소스 파일</Filter>
+    </ClCompile>
+    <ClCompile Include="..\Common\Text.cpp">
+      <Filter>공용</Filter>
+    </ClCompile>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff --git a/ResourceManager/dllMain.cpp b/ResourceManager/dllMain.cpp
new file mode 100644
index 0000000..4273f53
--- /dev/null
+++ b/ResourceManager/dllMain.cpp
@@ -0,0 +1,12 @@
+#include <Windows.h>
+#include "ManagerClass.h"
+
+bool WINAPI DllMain(HINSTANCE hInstace, DWORD fdwReason, LPVOID lpReserved){
+	if(fdwReason == DLL_PROCESS_DETACH){
+		if(_ResourceManager::GetSingleton() != 0x0){
+			_ResourceManager::Destroy();
+		}
+	}
+
+	return true;
+}
\ No newline at end of file
diff --git a/patch.diff b/patch.diff
new file mode 100644
index 0000000..3792e10
--- /dev/null
+++ b/patch.diff
@@ -0,0 +1,2061 @@
+diff --git a/Base Library.sdf b/Base Library.sdf
+new file mode 100644
+index 0000000..fa96ee3
+Binary files /dev/null and b/Base Library.sdf differ
+diff --git a/Base Library.sln b/Base Library.sln
+new file mode 100644
+index 0000000..8f1132e
+--- /dev/null
++++ b/Base Library.sln	
+@@ -0,0 +1,38 @@
++﻿
++Microsoft Visual Studio Solution File, Format Version 12.00
++# Visual Studio 14
++VisualStudioVersion = 14.0.24720.0
++MinimumVisualStudioVersion = 10.0.40219.1
++Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "GameSystem", "GameSystem\GameSystem.vcxproj", "{F23273CB-5F09-4C70-B303-0B6CEDD22ACB}"
++EndProject
++Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "RenderInterface", "RenderInterface\RenderInterface.vcxproj", "{D289CE0D-F960-4B76-B22B-5ED339A44954}"
++EndProject
++Global
++	GlobalSection(SolutionConfigurationPlatforms) = preSolution
++		Debug|x64 = Debug|x64
++		Debug|x86 = Debug|x86
++		Release|x64 = Release|x64
++		Release|x86 = Release|x86
++	EndGlobalSection
++	GlobalSection(ProjectConfigurationPlatforms) = postSolution
++		{F23273CB-5F09-4C70-B303-0B6CEDD22ACB}.Debug|x64.ActiveCfg = Debug|x64
++		{F23273CB-5F09-4C70-B303-0B6CEDD22ACB}.Debug|x64.Build.0 = Debug|x64
++		{F23273CB-5F09-4C70-B303-0B6CEDD22ACB}.Debug|x86.ActiveCfg = Debug|Win32
++		{F23273CB-5F09-4C70-B303-0B6CEDD22ACB}.Debug|x86.Build.0 = Debug|Win32
++		{F23273CB-5F09-4C70-B303-0B6CEDD22ACB}.Release|x64.ActiveCfg = Release|x64
++		{F23273CB-5F09-4C70-B303-0B6CEDD22ACB}.Release|x64.Build.0 = Release|x64
++		{F23273CB-5F09-4C70-B303-0B6CEDD22ACB}.Release|x86.ActiveCfg = Release|Win32
++		{F23273CB-5F09-4C70-B303-0B6CEDD22ACB}.Release|x86.Build.0 = Release|Win32
++		{D289CE0D-F960-4B76-B22B-5ED339A44954}.Debug|x64.ActiveCfg = Debug|x64
++		{D289CE0D-F960-4B76-B22B-5ED339A44954}.Debug|x64.Build.0 = Debug|x64
++		{D289CE0D-F960-4B76-B22B-5ED339A44954}.Debug|x86.ActiveCfg = Debug|Win32
++		{D289CE0D-F960-4B76-B22B-5ED339A44954}.Debug|x86.Build.0 = Debug|Win32
++		{D289CE0D-F960-4B76-B22B-5ED339A44954}.Release|x64.ActiveCfg = Release|x64
++		{D289CE0D-F960-4B76-B22B-5ED339A44954}.Release|x64.Build.0 = Release|x64
++		{D289CE0D-F960-4B76-B22B-5ED339A44954}.Release|x86.ActiveCfg = Release|Win32
++		{D289CE0D-F960-4B76-B22B-5ED339A44954}.Release|x86.Build.0 = Release|Win32
++	EndGlobalSection
++	GlobalSection(SolutionProperties) = preSolution
++		HideSolutionNode = FALSE
++	EndGlobalSection
++EndGlobal
+diff --git a/Debug/GameSystem.exp b/Debug/GameSystem.exp
+new file mode 100644
+index 0000000..7ed75ac
+Binary files /dev/null and b/Debug/GameSystem.exp differ
+diff --git a/Debug/RenderInterface.exp b/Debug/RenderInterface.exp
+new file mode 100644
+index 0000000..a60c674
+Binary files /dev/null and b/Debug/RenderInterface.exp differ
+diff --git a/GameSystem/Camera.cpp b/GameSystem/Camera.cpp
+new file mode 100644
+index 0000000..8e8582a
+--- /dev/null
++++ b/GameSystem/Camera.cpp
+@@ -0,0 +1,161 @@
++#include "Object.h"
++#include "MainSystem.h"
++
++_CCamera::_CCamera(){
++	m_eye = {0.0f, 0.0f, 0.0f};
++	m_lookat = {0.0f, 0.0f, 0.0f};
++	m_up = {0.0f, 1.0f, 0.0f};
++
++	m_aspect = {1.0f, 1.0f};
++	m_z = {1.0f, 10.0f};
++
++	m_view = {1.0f, 0.0f, 0.0f, 0.0f,
++			  0.0f, 1.0f, 0.0f, 0.0f,
++			  0.0f, 0.0f, 1.0f, 0.0f,
++			  0.0f, 0.0f, 20.0f, 1.0f};
++	m_proj = {800.0f, 0.0f, 0.0f, 0.0f,
++			  0.0f, 600.0f, 0.0f, 0.0f,
++			  0.0f, 0.0f, 1.0f, 1.0f,
++			  0.0f, 0.0f, -10.0f, 0.0f};
++
++	m_Object_List = 0x00;
++
++	m_pos = {0.0f, 0.0f};
++	m_size = {800.0f, 600.0f};
++
++	m_able = true;
++
++	_CGameSystem::GetSingleton()->RegisterCamera(this);
++}
++_CCamera::~_CCamera(){
++	while(m_Object_List != 0x00){
++		_LIST<_CObject>* t_node = m_Object_List;
++		m_Object_List = m_Object_List->_next;
++		delete t_node;
++	}
++	
++	_CGameSystem::GetSingleton()->RemoveCamera(this);
++}
++
++bool _CCamera::RegisterObject(_CObject* obj){
++	_LIST<_CObject>** t_node = &m_Object_List;
++	while((*t_node) != 0x00){
++		if((*t_node)->_node == obj){return false;}
++		t_node = &((*t_node)->_next);
++	}
++	(*t_node) = new _LIST<_CObject>;
++	(*t_node)->_node = obj;
++	(*t_node)->_next = 0x00;
++	return true;
++}
++bool _CCamera::RemoveObject(_CObject* obj){
++	_LIST<_CObject>** t_node = &m_Object_List;
++	while((*t_node) != 0x00){
++		if((*t_node)->_next->_node == obj){
++			_LIST<_CObject>* d_node = (*t_node)->_next;
++			(*t_node)->_next = d_node->_next;
++			delete d_node;
++			return true;
++		}
++		t_node = &((*t_node)->_next);
++	}
++	return false;
++}
++
++bool _CCamera::Getable() const{return m_able;}
++void _CCamera::Enable(){m_able = true;}
++void _CCamera::Disable(){m_able = false;}
++
++void _CCamera::Render(_DISPLAY* display){
++	_LIST<_CObject>* t_node = m_Object_List;
++	UINT obj_num = 0;
++	while(t_node != 0x00){
++		++obj_num;
++		t_node = t_node->_next;
++	}
++	_OBJECT* obj_list = new _OBJECT[obj_num];
++	t_node = m_Object_List;
++	for(UINT i = 0 ;i<obj_num ; ++i){
++		//obj_list[i] = t_node;
++		obj_list[i].vertex_num = t_node->_node->GetVertexNumber();
++		obj_list[i].vertex = new _VERTEX[obj_list[i].vertex_num];
++		for(UINT j = 0 ; j<(obj_list[i].vertex_num) ; ++j){
++			obj_list[i].vertex[j].vertex.x = t_node->_node->GetVertex()[j].pos.x;
++			obj_list[i].vertex[j].vertex.y = t_node->_node->GetVertex()[j].pos.y;
++			obj_list[i].vertex[j].vertex.z = t_node->_node->GetVertex()[j].pos.z;
++			obj_list[i].vertex[j].vertex.w = t_node->_node->GetVertex()[j].pos.w;
++
++			obj_list[i].vertex[j].diffuse.x = t_node->_node->GetVertex()[j].diffuse.x;
++			obj_list[i].vertex[j].diffuse.y = t_node->_node->GetVertex()[j].diffuse.y;
++			obj_list[i].vertex[j].diffuse.z = t_node->_node->GetVertex()[j].diffuse.z;
++			obj_list[i].vertex[j].diffuse.w = t_node->_node->GetVertex()[j].diffuse.w;
++
++			obj_list[i].vertex[j].normal.x = t_node->_node->GetVertex()[j].normal.x;
++			obj_list[i].vertex[j].normal.y = t_node->_node->GetVertex()[j].normal.y;
++			obj_list[i].vertex[j].normal.z = t_node->_node->GetVertex()[j].normal.z;
++			obj_list[i].vertex[j].normal.w = t_node->_node->GetVertex()[j].normal.w;
++
++			obj_list[i].vertex[j].textureUV.x = t_node->_node->GetVertex()[j].tex.x;
++			obj_list[i].vertex[j].textureUV.x = t_node->_node->GetVertex()[j].tex.x;
++		}
++		obj_list[i].texture_num = 0;//t_node->_node->GetTextureNumber
++		//obj_list[i].texture = new TEXT[obj_list[i].texture_num];
++		for(UINT j = 0 ; j<(obj_list[i].texture_num) ; ++j){
++
++		}
++		obj_list[i].world_mat._11 = t_node->_node->GetWorldMatrix()._11;
++		obj_list[i].world_mat._12 = t_node->_node->GetWorldMatrix()._12;
++		obj_list[i].world_mat._13 = t_node->_node->GetWorldMatrix()._13;
++		obj_list[i].world_mat._14 = t_node->_node->GetWorldMatrix()._14;
++		obj_list[i].world_mat._21 = t_node->_node->GetWorldMatrix()._21;
++		obj_list[i].world_mat._22 = t_node->_node->GetWorldMatrix()._22;
++		obj_list[i].world_mat._23 = t_node->_node->GetWorldMatrix()._23;
++		obj_list[i].world_mat._24 = t_node->_node->GetWorldMatrix()._24;
++		obj_list[i].world_mat._31 = t_node->_node->GetWorldMatrix()._31;
++		obj_list[i].world_mat._32 = t_node->_node->GetWorldMatrix()._32;
++		obj_list[i].world_mat._33 = t_node->_node->GetWorldMatrix()._33;
++		obj_list[i].world_mat._34 = t_node->_node->GetWorldMatrix()._34;
++		obj_list[i].world_mat._41 = t_node->_node->GetWorldMatrix()._41;
++		obj_list[i].world_mat._42 = t_node->_node->GetWorldMatrix()._42;
++		obj_list[i].world_mat._43 = t_node->_node->GetWorldMatrix()._43;
++		obj_list[i].world_mat._44 = t_node->_node->GetWorldMatrix()._44;
++
++		t_node = t_node->_next;
++	}
++
++	_CAMERA* camera = new _CAMERA;
++
++	camera->view_mat._11 = m_view._11; camera->view_mat._12 = m_view._12;
++	camera->view_mat._13 = m_view._13; camera->view_mat._14 = m_view._14;
++	camera->view_mat._21 = m_view._21; camera->view_mat._22 = m_view._22;
++	camera->view_mat._23 = m_view._23; camera->view_mat._24 = m_view._24;
++	camera->view_mat._31 = m_view._31; camera->view_mat._32 = m_view._32;
++	camera->view_mat._33 = m_view._33; camera->view_mat._34 = m_view._34;
++	camera->view_mat._41 = m_view._41; camera->view_mat._42 = m_view._42;
++	camera->view_mat._43 = m_view._43; camera->view_mat._44 = m_view._44;
++
++	camera->proj_mat._11 = m_proj._11; camera->proj_mat._12 = m_proj._12;
++	camera->proj_mat._13 = m_proj._13; camera->proj_mat._14 = m_proj._14;
++	camera->proj_mat._21 = m_proj._21; camera->proj_mat._22 = m_proj._22;
++	camera->proj_mat._23 = m_proj._23; camera->proj_mat._24 = m_proj._24;
++	camera->proj_mat._31 = m_proj._31; camera->proj_mat._32 = m_proj._32;
++	camera->proj_mat._33 = m_proj._33; camera->proj_mat._34 = m_proj._34;
++	camera->proj_mat._41 = m_proj._41; camera->proj_mat._42 = m_proj._42;
++	camera->proj_mat._43 = m_proj._43; camera->proj_mat._44 = m_proj._44;
++
++	display->x = m_pos.x;
++	display->y = m_pos.y;
++	display->width = m_size.x;
++	display->height = m_size.y;
++	display->buf = new UINT[(display->width * display->height)];
++
++	::Render(display->width, display->height, display->buf,
++		obj_list, obj_num, 0x00, 0, camera);
++
++	for(UINT i = 0 ;i<obj_num ; ++i){
++		delete [] (obj_list[i].vertex);
++		//delete [] (obj_list[i].texture);
++	}
++	delete [] obj_list;
++	delete camera;
++}
+\ No newline at end of file
+diff --git a/GameSystem/GameSystem.cpp b/GameSystem/GameSystem.cpp
+new file mode 100644
+index 0000000..4437fe7
+--- /dev/null
++++ b/GameSystem/GameSystem.cpp
+@@ -0,0 +1,68 @@
++#include "GameSystem.h"
++
++void update(){
++	_CGameSystem::GetSingleton()->Update();
++}
++
++void* CreateObject(void (*func)()){
++	_CObject* obj = _CGameSystem::GetSingleton()->CreateObject();
++	obj->update = func;
++	return (void*)obj;
++}
++bool ReleaseObject(void* obj){
++	return _CGameSystem::GetSingleton()->ReleaseObject((_CObject*)obj);
++}
++
++bool RegisterUpdate(void* pointer){
++	_CObject* obj = (_CObject*)pointer;
++	return _CGameSystem::GetSingleton()->RegisterUpdate(obj->update);
++}
++bool RemoveUpdate(void* pointer){
++	_CObject* obj = (_CObject*)pointer;
++	return _CGameSystem::GetSingleton()->RemoveUpdate(obj->update);
++}
++
++void* CreateCamera(){
++	_CCamera* cam = new _CCamera;
++	return cam;
++}
++bool ReleaseCameraUsePointer(void* cam){
++	delete cam;
++	return true;
++}
++bool ReleaseCameraUseID(UINT ID){
++	_CCamera* cam = _CGameSystem::GetSingleton()->SearchCamera(ID);
++	delete cam;
++	return true;
++}
++
++void SetBackBuffer(UINT x, UINT y){
++	_CGameSystem::GetSingleton()->SetSize(x,y);
++}
++UINT GetBackBufferX(){
++	return _CGameSystem::GetSingleton()->GetSizeX();
++}
++UINT GetBackBufferY(){
++	return _CGameSystem::GetSingleton()->GetSizeY();
++}
++_defaultvertex* GetVertex(Object obj){
++	_CObject* t_obj = (_CObject*)obj;
++	return t_obj->GetVertex();
++}
++UINT GetVertexNum(Object obj){
++	_CObject* t_obj = (_CObject*)obj;
++	return t_obj->GetVertexNumber();
++}
++bool SetVertex(Object obj, _defaultvertex* ver, UINT num){
++	_CObject* t_obj = (_CObject*)obj;
++	return t_obj->SetVertex(ver, num);
++}
++
++bool RegisterObjectForCamera(Camera cam, Object obj){
++	_CCamera* t_cam = (_CCamera*)cam;
++	return t_cam->RegisterObject((_CObject*)obj);
++}
++bool RemoveObjectForCamera(Camera cam, Object obj){
++	_CCamera* t_cam = (_CCamera*)cam;
++	return t_cam->RemoveObject((_CObject*)obj);
++}
+\ No newline at end of file
+diff --git a/GameSystem/GameSystem.h b/GameSystem/GameSystem.h
+new file mode 100644
+index 0000000..f875779
+--- /dev/null
++++ b/GameSystem/GameSystem.h
+@@ -0,0 +1,108 @@
++#pragma once
++
++#ifdef GAMESYSTEM_EXPORTS
++#define GSYS_API __declspec(dllexport)
++#include "MainSystem.h"
++#else
++#define GSYS_API __declspec(dllimport)
++#pragma comment(lib,"GameSystem.lib")
++#endif
++
++typedef void* Object;
++typedef void* Camera;
++
++#ifndef GAMESYSTEM_EXPORTS
++
++#define __x86__
++
++#ifdef __x86__
++typedef float			FLOAT;
++typedef int				INT;
++typedef unsigned int	UINT;
++#else
++typedef double				FLOAT
++#define __int64				INT 
++#define unsigned __int64	UINT
++#endif
++
++extern "C"{
++	struct _vector2{
++		FLOAT x, y;
++	};
++
++	struct _vector3{
++		FLOAT x, y, z;
++	};
++
++	struct _vector4{
++		FLOAT x, y, z, w;
++	};
++
++	struct _matrix2x2{
++		FLOAT _11, _12;
++		FLOAT _21, _22;
++	};
++
++	struct _matrix3x3{
++		FLOAT _11, _12, _13;
++		FLOAT _21, _22, _23;
++		FLOAT _31, _32, _33;
++	};
++
++	struct _matrix4x4{
++		FLOAT _11, _12, _13, _14;
++		FLOAT _21, _22, _23, _24;
++		FLOAT _31, _32, _33, _34;
++		FLOAT _41, _42, _43, _44;
++	};
++
++	struct _defaultvertex{
++		_vector3 pos;
++		_vector3 normal;
++		_vector4 diffuse;
++		_vector2 tex;
++	};
++}
++#endif
++
++extern "C"{
++	GSYS_API void update();
++}
++
++extern "C"{
++	GSYS_API void* CreateObject(void (*)());
++	GSYS_API bool ReleaseObject(void*);
++
++	GSYS_API void* CreateCamera();
++	GSYS_API bool ReleaseCameraUsePointer(void*);
++	GSYS_API bool ReleaseCameraUseID(UINT);
++
++	GSYS_API bool RegisterUpdate(void*);
++	GSYS_API bool RemoveUpdate(void*);
++	/*
++	GSYS_API void AlterPosition(void*, FLOAT, FLOAT, FLOAT);
++	GSYS_API void AlterRotation(void*, FLOAT, FLOAT, FLOAT);
++	GSYS_API void AlterScale(void*, FLOAT, FLOAT, FLOAT);
++	GSYS_API void SetWorldMatrix(void*, 
++		FLOAT, FLOAT, FLOAT, FLOAT,
++		FLOAT, FLOAT, FLOAT, FLOAT,
++		FLOAT, FLOAT, FLOAT, FLOAT,
++		FLOAT, FLOAT, FLOAT, FLOAT);*/
++
++	//GSYS_API bool RegisterRender(void*, UINT);
++	//GSYS_API bool RemoveRender(void*, UINT);
++}
++
++extern "C"{
++	GSYS_API void SetBackBuffer(UINT x, UINT y);
++	GSYS_API UINT GetBackBufferX();
++	GSYS_API UINT GetBackBufferY();
++	GSYS_API _defaultvertex* GetVertex(Object);
++	GSYS_API UINT GetVertexNum(Object);
++	GSYS_API bool SetVertex(Object, _defaultvertex*, UINT);
++}
++
++extern "C"{
++	GSYS_API bool RegisterObjectForCamera(Camera,Object);
++	GSYS_API bool RemoveObjectForCamera(Camera,Object);
++}
+\ No newline at end of file
+diff --git a/GameSystem/GameSystem.vcxproj b/GameSystem/GameSystem.vcxproj
+new file mode 100644
+index 0000000..bdcbc92
+--- /dev/null
++++ b/GameSystem/GameSystem.vcxproj
+@@ -0,0 +1,168 @@
++﻿<?xml version="1.0" encoding="utf-8"?>
++<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <ItemGroup Label="ProjectConfigurations">
++    <ProjectConfiguration Include="Debug|Win32">
++      <Configuration>Debug</Configuration>
++      <Platform>Win32</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Release|Win32">
++      <Configuration>Release</Configuration>
++      <Platform>Win32</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Debug|x64">
++      <Configuration>Debug</Configuration>
++      <Platform>x64</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Release|x64">
++      <Configuration>Release</Configuration>
++      <Platform>x64</Platform>
++    </ProjectConfiguration>
++  </ItemGroup>
++  <PropertyGroup Label="Globals">
++    <ProjectGuid>{F23273CB-5F09-4C70-B303-0B6CEDD22ACB}</ProjectGuid>
++    <Keyword>Win32Proj</Keyword>
++    <RootNamespace>GameSystem</RootNamespace>
++    <WindowsTargetPlatformVersion>8.1</WindowsTargetPlatformVersion>
++  </PropertyGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
++    <ConfigurationType>DynamicLibrary</ConfigurationType>
++    <UseDebugLibraries>true</UseDebugLibraries>
++    <PlatformToolset>v140</PlatformToolset>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
++    <ConfigurationType>DynamicLibrary</ConfigurationType>
++    <UseDebugLibraries>false</UseDebugLibraries>
++    <PlatformToolset>v140</PlatformToolset>
++    <WholeProgramOptimization>true</WholeProgramOptimization>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
++    <ConfigurationType>DynamicLibrary</ConfigurationType>
++    <UseDebugLibraries>true</UseDebugLibraries>
++    <PlatformToolset>v140</PlatformToolset>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
++    <ConfigurationType>DynamicLibrary</ConfigurationType>
++    <UseDebugLibraries>false</UseDebugLibraries>
++    <PlatformToolset>v140</PlatformToolset>
++    <WholeProgramOptimization>true</WholeProgramOptimization>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
++  <ImportGroup Label="ExtensionSettings">
++  </ImportGroup>
++  <ImportGroup Label="Shared">
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <PropertyGroup Label="UserMacros" />
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <LinkIncremental>true</LinkIncremental>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <LinkIncremental>true</LinkIncremental>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <LinkIncremental>false</LinkIncremental>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <LinkIncremental>false</LinkIncremental>
++  </PropertyGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <ClCompile>
++      <PrecompiledHeader>
++      </PrecompiledHeader>
++      <WarningLevel>Level3</WarningLevel>
++      <Optimization>Disabled</Optimization>
++      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;_USRDLL;GAMESYSTEM_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <SDLCheck>true</SDLCheck>
++    </ClCompile>
++    <Link>
++      <SubSystem>Windows</SubSystem>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <ClCompile>
++      <PrecompiledHeader>
++      </PrecompiledHeader>
++      <WarningLevel>Level3</WarningLevel>
++      <Optimization>Disabled</Optimization>
++      <PreprocessorDefinitions>_DEBUG;_WINDOWS;_USRDLL;GAMESYSTEM_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <SDLCheck>true</SDLCheck>
++    </ClCompile>
++    <Link>
++      <SubSystem>Windows</SubSystem>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <PrecompiledHeader>
++      </PrecompiledHeader>
++      <Optimization>MaxSpeed</Optimization>
++      <FunctionLevelLinking>true</FunctionLevelLinking>
++      <IntrinsicFunctions>true</IntrinsicFunctions>
++      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;GAMESYSTEM_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <SDLCheck>true</SDLCheck>
++    </ClCompile>
++    <Link>
++      <SubSystem>Windows</SubSystem>
++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
++      <OptimizeReferences>true</OptimizeReferences>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <PrecompiledHeader>
++      </PrecompiledHeader>
++      <Optimization>MaxSpeed</Optimization>
++      <FunctionLevelLinking>true</FunctionLevelLinking>
++      <IntrinsicFunctions>true</IntrinsicFunctions>
++      <PreprocessorDefinitions>NDEBUG;_WINDOWS;_USRDLL;GAMESYSTEM_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <SDLCheck>true</SDLCheck>
++    </ClCompile>
++    <Link>
++      <SubSystem>Windows</SubSystem>
++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
++      <OptimizeReferences>true</OptimizeReferences>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemGroup>
++    <ClCompile Include="..\Text.cpp" />
++    <ClCompile Include="Camera.cpp" />
++    <ClCompile Include="dllMain.cpp" />
++    <ClCompile Include="GameSystem.cpp" />
++    <ClCompile Include="MainSystem.cpp" />
++    <ClCompile Include="Object.cpp" />
++  </ItemGroup>
++  <ItemGroup>
++    <ClInclude Include="..\RenderInterface\RenderInterface.h" />
++    <ClInclude Include="..\Text.h" />
++    <ClInclude Include="GameSystem.h" />
++    <ClInclude Include="List.h" />
++    <ClInclude Include="MainSystem.h" />
++    <ClInclude Include="Object.h" />
++    <ClInclude Include="Variable.h" />
++  </ItemGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
++  <ImportGroup Label="ExtensionTargets">
++  </ImportGroup>
++</Project>
+\ No newline at end of file
+diff --git a/GameSystem/GameSystem.vcxproj.filters b/GameSystem/GameSystem.vcxproj.filters
+new file mode 100644
+index 0000000..415b294
+--- /dev/null
++++ b/GameSystem/GameSystem.vcxproj.filters
+@@ -0,0 +1,60 @@
++﻿<?xml version="1.0" encoding="utf-8"?>
++<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <ItemGroup>
++    <Filter Include="소스 파일">
++      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
++      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
++    </Filter>
++    <Filter Include="헤더 파일">
++      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
++      <Extensions>h;hh;hpp;hxx;hm;inl;inc;xsd</Extensions>
++    </Filter>
++    <Filter Include="리소스 파일">
++      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
++      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
++    </Filter>
++  </ItemGroup>
++  <ItemGroup>
++    <ClCompile Include="dllMain.cpp">
++      <Filter>소스 파일</Filter>
++    </ClCompile>
++    <ClCompile Include="GameSystem.cpp">
++      <Filter>소스 파일</Filter>
++    </ClCompile>
++    <ClCompile Include="MainSystem.cpp">
++      <Filter>소스 파일</Filter>
++    </ClCompile>
++    <ClCompile Include="Object.cpp">
++      <Filter>소스 파일</Filter>
++    </ClCompile>
++    <ClCompile Include="Camera.cpp">
++      <Filter>소스 파일</Filter>
++    </ClCompile>
++    <ClCompile Include="..\Text.cpp">
++      <Filter>소스 파일</Filter>
++    </ClCompile>
++  </ItemGroup>
++  <ItemGroup>
++    <ClInclude Include="GameSystem.h">
++      <Filter>헤더 파일</Filter>
++    </ClInclude>
++    <ClInclude Include="Variable.h">
++      <Filter>헤더 파일</Filter>
++    </ClInclude>
++    <ClInclude Include="Object.h">
++      <Filter>헤더 파일</Filter>
++    </ClInclude>
++    <ClInclude Include="MainSystem.h">
++      <Filter>헤더 파일</Filter>
++    </ClInclude>
++    <ClInclude Include="List.h">
++      <Filter>헤더 파일</Filter>
++    </ClInclude>
++    <ClInclude Include="..\Text.h">
++      <Filter>헤더 파일</Filter>
++    </ClInclude>
++    <ClInclude Include="..\RenderInterface\RenderInterface.h">
++      <Filter>헤더 파일</Filter>
++    </ClInclude>
++  </ItemGroup>
++</Project>
+\ No newline at end of file
+diff --git a/GameSystem/List.h b/GameSystem/List.h
+new file mode 100644
+index 0000000..b177409
+--- /dev/null
++++ b/GameSystem/List.h
+@@ -0,0 +1,14 @@
++#pragma once
++
++
++template <class T>
++struct _LIST{
++public:
++	T* _node;
++	_LIST<T>* _next;
++};
++
++struct _funcLIST{
++	void (*_func)();
++	_funcLIST* _next;
++};
+\ No newline at end of file
+diff --git a/GameSystem/MainSystem.cpp b/GameSystem/MainSystem.cpp
+new file mode 100644
+index 0000000..c64ad21
+--- /dev/null
++++ b/GameSystem/MainSystem.cpp
+@@ -0,0 +1,240 @@
++#include "MainSystem.h"
++
++_CGameSystem* _CGameSystem::m_pSingleton = 0x00;
++
++_CGameSystem* _CGameSystem::GetSingleton(){
++	if(m_pSingleton == 0x00){
++		m_pSingleton = new _CGameSystem;
++	}
++	return m_pSingleton;
++}
++
++void _CGameSystem::Destroy(){
++	if(m_pSingleton != 0x00){
++		delete m_pSingleton;
++		m_pSingleton = 0x00;
++	}
++}
++
++_CGameSystem::_CGameSystem() : 
++	m_Object_List(0x00), m_Object_num(0),
++	m_Camera_List(0x00), m_Camera_num(0),
++	m_update_List(0x00), m_update_num(0),
++	m_Size_x(0), m_Size_y(0)
++{}
++_CGameSystem::~_CGameSystem(){
++	RemoveAllCamera();
++	RemoveAllUpdate();
++	ReleaseAllObject();
++}
++
++void _CGameSystem::Update(){
++	_funcLIST* t_func = m_update_List;
++	while(t_func != 0x00){
++		if(t_func->_func != 0x00){t_func->_func();}
++		t_func = t_func->_next;
++	}
++
++	_LIST<_CCamera>* t_cam = m_Camera_List;
++	UINT enable_cam = 0;
++	while(t_cam != 0x00){
++		if(t_cam->_node->Getable()){
++			++enable_cam;
++		}
++		t_cam = t_cam->_next;
++	}
++	_DISPLAY* display = new _DISPLAY[enable_cam];
++	t_cam = m_Camera_List;
++	UINT now_cam = 0;
++	while(t_cam != 0x00){
++		if(t_cam->_node->Getable()){
++			t_cam->_node->Render(&(display[now_cam]));
++			++now_cam;
++		}
++		t_cam = t_cam->_next;
++	}
++	DrawDisplay(m_Size_x,m_Size_y,display,enable_cam);
++	for(UINT i = 0 ; i<enable_cam ; ++i){
++		delete [] (display[i].buf);
++	}
++	delete [] display;
++}
++
++UINT _CGameSystem::GetSizeX() const{return m_Size_x;}
++UINT _CGameSystem::GetSizeY() const{return m_Size_y;}
++void _CGameSystem::SetSize(UINT x, UINT y){m_Size_x = x; m_Size_y = y;}
++
++//Object//////////////////////////////////////////////////////////////////////////////////////
++UINT _CGameSystem::GetObjectNumber() const{return m_Object_num;}
++_CObject* _CGameSystem::CreateObject(){
++	_LIST<_CObject>* t_node = new _LIST<_CObject>;
++	t_node->_node = new _CObject;
++	t_node->_next = m_Object_List;
++	m_Object_List = t_node;
++
++	++m_Object_num;
++
++	return t_node->_node;
++}
++
++bool _CGameSystem::ReleaseObject(_CObject* obj){
++	_LIST<_CObject>* t_node = m_Object_List;
++	_LIST<_CObject>* prev = 0x00;
++	while(t_node != 0x00){
++		if(t_node->_node == obj){
++			_LIST<_CCamera>* c_node = m_Camera_List;
++			while(c_node != 0x00){
++				c_node->_node->RemoveObject(obj);
++			}
++			//remove speaker in obj
++			//remove input in obj
++
++			if(prev != 0x00){
++				prev->_next = t_node->_next;
++			}
++			else{
++				m_Object_List = t_node->_next;
++			}
++			delete (t_node->_node);
++			delete t_node;
++
++			--m_Object_num;
++
++			return true;
++		}
++		prev = t_node;
++		t_node = t_node->_next;
++	}
++	return false;
++}
++bool _CGameSystem::ReleaseAllObject(){
++	_LIST<_CObject>* d_node = m_Object_List;
++	while(d_node != 0x00){
++		m_Object_List = m_Object_List->_next;
++		delete (d_node->_node);
++		delete d_node;
++		d_node = m_Object_List;
++	}
++
++	m_Object_num = 0;
++	return true;
++}
++//////////////////////////////////////////////////////////////////////////////////////////////
++
++//Camera//////////////////////////////////////////////////////////////////////////////////////
++UINT _CGameSystem::GetCameraNumber() const{return m_Camera_num;}
++bool _CGameSystem::RegisterCamera(_CCamera* cam){
++	_LIST<_CCamera>** t_node = &m_Camera_List;
++	while((*t_node) != 0x00){
++		if((*t_node)->_node == cam){return false;}
++		t_node = &((*t_node)->_next);
++	}
++	(*t_node) = new _LIST<_CCamera>;
++	(*t_node)->_node = cam;
++	(*t_node)->_next = 0x00;
++
++	++m_Camera_num;
++
++	return true;
++}
++bool _CGameSystem::RemoveCamera(_CCamera* cam){
++	_LIST<_CCamera>* t_node = m_Camera_List;
++	_LIST<_CCamera>* prev = 0x00;
++	while(t_node != 0x00){
++		if(t_node->_node == cam){
++			if(prev != 0x00){
++				prev->_next = t_node->_next;
++			}
++			else{
++				m_Camera_List = t_node->_next;
++			}
++			delete t_node;
++
++			--m_Camera_num;
++
++			return true;
++		}
++		prev = t_node;
++		t_node = t_node->_next;
++	}
++	return false;
++}
++bool _CGameSystem::RemoveAllCamera(){
++	_LIST<_CCamera>* d_node = m_Camera_List;
++	while(d_node != 0x00){
++		m_Camera_List = m_Camera_List->_next;
++		delete d_node;
++		d_node = m_Camera_List;
++	}
++	m_Camera_num = 0;
++	return true;
++}
++_CCamera* _CGameSystem::SearchCamera(UINT ID) const{
++	_LIST<_CCamera>* t_node = m_Camera_List;
++	for(UINT i = 0 ; i<ID ; ++i){
++		if(t_node == 0x00){return 0x00;}
++		t_node = t_node->_next;
++	}
++	return t_node->_node;
++}
++bool _CGameSystem::SwapCamera(_CCamera* cam1, _CCamera* cam2){return false;}
++//////////////////////////////////////////////////////////////////////////////////////////
++
++//Update//////////////////////////////////////////////////////////////////////////////////
++UINT _CGameSystem::GetUpdateNumber() const{return m_update_num;}
++bool _CGameSystem::RegisterUpdate(void (*func)()){
++	_funcLIST** t_node = &m_update_List;
++	while((*t_node) != 0x00){
++		if((*t_node)->_func == func){return false;}
++		t_node = &((*t_node)->_next);
++	}
++	(*t_node) = new _funcLIST;
++	(*t_node)->_func = func;
++	(*t_node)->_next = 0x00;
++
++	++m_update_num;
++
++	return true;
++}
++bool _CGameSystem::RemoveUpdate(void (*func)()){
++	_funcLIST* t_node = m_update_List;
++	_funcLIST* prev = 0x00;
++	while(t_node != 0x00){
++		if(t_node->_func == func){
++			if(prev != 0x00){
++				prev->_next = t_node->_next;
++			}
++			else{
++				m_update_List = t_node->_next;
++			}
++			delete t_node;
++
++			--m_update_num;
++
++			return true;
++		}
++		prev = t_node;
++		t_node = t_node->_next;
++	}
++	return false;
++}
++bool _CGameSystem::RemoveAllUpdate(){
++	_funcLIST* d_node = m_update_List;
++	while(d_node != 0x00){
++		m_update_List = m_update_List->_next;
++		delete d_node;
++		d_node = m_update_List;
++	}
++	m_update_num = 0;
++	return true;
++}
++void* _CGameSystem::SearchUpdate(UINT ID) const{
++	_funcLIST* t_node = m_update_List;
++	for(UINT i = 0 ; i<ID ; ++i){
++		if(t_node == 0x00){return 0x00;}
++		t_node = t_node->_next;
++	}
++	return t_node->_func;
++}
++bool _CGameSystem::SwapUpdate(void*, void*){return false;}
++//////////////////////////////////////////////////////////////////////////////////////////
+diff --git a/GameSystem/MainSystem.h b/GameSystem/MainSystem.h
+new file mode 100644
+index 0000000..860638f
+--- /dev/null
++++ b/GameSystem/MainSystem.h
+@@ -0,0 +1,63 @@
++#pragma once
++
++#include "List.h"
++#include "Object.h"
++
++#include "..\\RenderInterface\\RenderInterface.h"
++
++class _CGameSystem{
++private:
++	//List Object
++	_LIST<_CObject>* m_Object_List;
++	UINT m_Object_num;
++
++	//List Camera
++	_LIST<_CCamera>* m_Camera_List;
++	UINT m_Camera_num;
++
++	//List Speaker
++	//List Input
++
++	//List Update
++	_funcLIST* m_update_List;
++	UINT m_update_num;
++
++	UINT m_Size_x, m_Size_y;
++
++	static _CGameSystem* m_pSingleton;
++
++	_CGameSystem();
++	~_CGameSystem();
++
++public:
++	static _CGameSystem* GetSingleton();
++	static void Destroy();
++
++	void Update();
++
++	UINT GetSizeX() const;
++	UINT GetSizeY() const;
++	void SetSize(UINT x, UINT y);
++
++	//Object
++	UINT GetObjectNumber() const;
++	_CObject* CreateObject();
++	bool ReleaseObject(_CObject*);
++	bool ReleaseAllObject();
++
++	//Render
++	UINT GetCameraNumber() const;
++	bool RegisterCamera(_CCamera*);
++	bool RemoveCamera(_CCamera*);
++	bool RemoveAllCamera();
++	_CCamera* SearchCamera(UINT) const;
++	bool SwapCamera(_CCamera*, _CCamera*);
++
++	//update
++	UINT GetUpdateNumber() const;
++	bool RegisterUpdate(void (*)());
++	bool RemoveUpdate(void (*)());
++	bool RemoveAllUpdate();
++	void* SearchUpdate(UINT) const;
++	bool SwapUpdate(void*, void*);
++};
+\ No newline at end of file
+diff --git a/GameSystem/Object.cpp b/GameSystem/Object.cpp
+new file mode 100644
+index 0000000..e6a0d57
+--- /dev/null
++++ b/GameSystem/Object.cpp
+@@ -0,0 +1,53 @@
++#include "Object.h"
++
++_CObject::_CObject(){
++	m_pos = {0.0f, 0.0f, 0.0f};
++	m_rot = {0.0f, 0.0f, 0.0f};
++	m_scl = {1.0f, 1.0f, 1.0f};
++
++	m_world = {1.0f, 0.0f, 0.0f, 0.0f,
++			   0.0f, 1.0f, 0.0f, 0.0f,
++			   0.0f, 0.0f, 1.0f, 0.0f,
++			   0.0f, 0.0f, 0.0f, 1.0f};
++
++	m_vertex = 0x00;
++	m_vertex_num = 0;
++
++	m_texture = 0x00;
++	m_texture_num = 0;
++}
++
++_CObject::~_CObject(){
++	if(m_vertex != 0x00){
++		delete [] m_vertex;
++		m_vertex = 0x00;
++		m_vertex_num = 0;
++	}
++	if(m_texture != 0x00){
++		delete [] m_texture;
++		m_texture = 0x00;
++		m_texture_num = 0;
++	}
++}
++
++_matrix4x4 _CObject::GetWorldMatrix() const{return m_world;}
++
++UINT _CObject::GetVertexNumber() const{
++	return m_vertex_num;
++}
++bool _CObject::SetVertex(_defaultvertex* vertex, UINT num){
++	if(m_vertex != 0x00){
++		delete [] m_vertex;
++		m_vertex = 0x00;
++		m_vertex_num = 0;
++	}
++	m_vertex = new _defaultvertex[num];
++	m_vertex_num = num;
++	for(UINT i = 0 ; i<num ; ++i){
++		m_vertex[i] = vertex[i];
++	}
++	return true;
++}
++_defaultvertex* _CObject::GetVertex() const{
++	return m_vertex;
++}
+\ No newline at end of file
+diff --git a/GameSystem/Object.h b/GameSystem/Object.h
+new file mode 100644
+index 0000000..8e6d288
+--- /dev/null
++++ b/GameSystem/Object.h
+@@ -0,0 +1,89 @@
++#pragma once
++
++#include "Variable.h"
++#include "List.h"
++#include "..\\Text.h"
++#include "..\\RenderInterface\\RenderInterface.h"
++/*
++struct _RenderData{
++public:
++	_matrix4x4 m_world;
++	_defaultvertex* m_vertex;
++	UINT m_vertex_num;
++};
++*/
++
++class _CCamera;
++//class _CSpeaker;
++//class _CInput;
++class _CObject;
++
++class _CObject{
++private:
++	//Graphics
++	_vector3 m_pos, m_rot, m_scl;
++	_matrix4x4 m_world;
++	_defaultvertex* m_vertex;
++	UINT m_vertex_num;
++	TEXT* m_texture;
++	UINT m_texture_num;
++
++	//Sound state
++
++	//Input Set
++
++	//update
++
++public:
++	_CObject();
++	~_CObject();
++
++	//render
++	//get, set, alter pos,rot,scl
++	//get, set, alter wld mat
++	_matrix4x4 GetWorldMatrix() const;
++	//get, set vertex array
++	UINT GetVertexNumber() const;
++	bool SetVertex(_defaultvertex*, UINT);
++	_defaultvertex* GetVertex() const;
++	//get, set texture array
++
++	//create sound set
++	//create input set
++
++	//sound
++
++	//input
++
++	//update
++	void (*update)();
++};
++
++class _CCamera{
++private:
++	_vector3 m_eye, m_lookat, m_up;
++	_vector2 m_aspect, m_z;
++	_matrix4x4 m_view, m_proj;
++	_LIST<_CObject>* m_Object_List;
++
++	_vector2 m_pos;
++	_vector2 m_size;
++
++	bool m_able;
++	
++public:
++	_CCamera();
++	~_CCamera();
++
++	bool RegisterObject(_CObject*);
++	bool RemoveObject(_CObject*);
++
++	bool Getable() const;
++	void Enable();
++	void Disable();
++
++	void Render(_DISPLAY*);
++};
++
++//class _CSpeaker{};
++//class _CInput{};
+\ No newline at end of file
+diff --git a/GameSystem/Variable.h b/GameSystem/Variable.h
+new file mode 100644
+index 0000000..dd0531c
+--- /dev/null
++++ b/GameSystem/Variable.h
+@@ -0,0 +1,57 @@
++#pragma once
++
++#define __x86__
++
++#ifdef __x86__
++typedef float			FLOAT;
++typedef int				INT;
++typedef unsigned int	UINT;
++#else
++typedef double				FLOAT
++#define __int64				INT 
++#define unsigned __int64	UINT
++#endif
++
++struct _vector2{
++public:
++	FLOAT x, y;
++};
++
++struct _vector3{
++public:
++	FLOAT x, y, z;
++};
++
++struct _vector4{
++public:
++	FLOAT x, y, z, w;
++};
++
++struct _matrix2x2{
++public:
++	FLOAT _11, _12;
++	FLOAT _21, _22;
++};
++
++struct _matrix3x3{
++public:
++	FLOAT _11, _12, _13;
++	FLOAT _21, _22, _23;
++	FLOAT _31, _32, _33;
++};
++
++struct _matrix4x4{
++public:
++	FLOAT _11, _12, _13, _14;
++	FLOAT _21, _22, _23, _24;
++	FLOAT _31, _32, _33, _34;
++	FLOAT _41, _42, _43, _44;
++};
++
++struct _defaultvertex{
++public:
++	_vector4 pos;
++	_vector4 normal;
++	_vector4 diffuse;
++	_vector2 tex;
++};
+\ No newline at end of file
+diff --git a/GameSystem/dllMain.cpp b/GameSystem/dllMain.cpp
+new file mode 100644
+index 0000000..7015f1d
+--- /dev/null
++++ b/GameSystem/dllMain.cpp
+@@ -0,0 +1,12 @@
++#include <Windows.h>
++
++#include "MainSystem.h"
++
++bool WINAPI DllMain(HINSTANCE hInstace, DWORD fdwReason, LPVOID lpReserved) {
++	if (fdwReason == DLL_PROCESS_DETACH) {
++		if(_CGameSystem::GetSingleton() != 0x00){
++			_CGameSystem::Destroy();
++		}
++	}
++	return true;
++}
+\ No newline at end of file
+diff --git a/Release/GameSystem.exp b/Release/GameSystem.exp
+new file mode 100644
+index 0000000..24c2a6d
+Binary files /dev/null and b/Release/GameSystem.exp differ
+diff --git a/Release/GameSystem.iobj b/Release/GameSystem.iobj
+new file mode 100644
+index 0000000..450a6c1
+Binary files /dev/null and b/Release/GameSystem.iobj differ
+diff --git a/Release/GameSystem.ipdb b/Release/GameSystem.ipdb
+new file mode 100644
+index 0000000..b078223
+Binary files /dev/null and b/Release/GameSystem.ipdb differ
+diff --git a/Release/RenderInterface.exp b/Release/RenderInterface.exp
+new file mode 100644
+index 0000000..f489c6d
+Binary files /dev/null and b/Release/RenderInterface.exp differ
+diff --git a/Release/RenderInterface.iobj b/Release/RenderInterface.iobj
+new file mode 100644
+index 0000000..f46976c
+Binary files /dev/null and b/Release/RenderInterface.iobj differ
+diff --git a/Release/RenderInterface.ipdb b/Release/RenderInterface.ipdb
+new file mode 100644
+index 0000000..9c1df4d
+Binary files /dev/null and b/Release/RenderInterface.ipdb differ
+diff --git a/RenderInterface/Interface.cpp b/RenderInterface/Interface.cpp
+new file mode 100644
+index 0000000..9d51ca1
+--- /dev/null
++++ b/RenderInterface/Interface.cpp
+@@ -0,0 +1,39 @@
++#include "Interface.h"
++
++#include "OpenGL.h"
++
++_CInterface* _CInterface::m_pSingleton = 0x00;
++
++_CInterface* _CInterface::GetSingleton(){
++	if(m_pSingleton == 0x00){
++		m_pSingleton = new _COpenGLRenderer;
++	}
++	return m_pSingleton;
++}
++
++void _CInterface::Destroy(){
++	if(m_pSingleton != 0x00){
++		delete m_pSingleton;
++		m_pSingleton = 0x00;
++	}
++}
++
++void _CInterface::SetType(TYPE::TYPE type){
++	if(GetSingleton()->GetType() == type){return;}
++	Destroy();
++	switch(type){
++	case TYPE::NONE:
++		m_pSingleton = 0x00;
++		break;
++	case TYPE::OpenGL:
++		m_pSingleton = new _COpenGLRenderer;
++		break;
++	default:
++		m_pSingleton = 0x00;
++		break;
++	}
++}
++
++TYPE::TYPE _CInterface::GetType(){
++	return TYPE::NONE;
++}
+\ No newline at end of file
+diff --git a/RenderInterface/Interface.h b/RenderInterface/Interface.h
+new file mode 100644
+index 0000000..8eab75c
+--- /dev/null
++++ b/RenderInterface/Interface.h
+@@ -0,0 +1,30 @@
++#pragma once
++
++#include "RenderInterface.h"
++
++namespace TYPE{
++	enum TYPE{
++		NONE,
++		OpenGL,
++		DirectX9,
++		DirectX11
++	};
++}
++
++class _CInterface{
++private:
++	static _CInterface* m_pSingleton;
++
++protected:
++	_CInterface(){}
++	~_CInterface(){}
++
++public:
++	static void SetType(TYPE::TYPE);
++	virtual TYPE::TYPE GetType();
++	static _CInterface* GetSingleton();
++	static void Destroy();
++
++	virtual bool Render(UINT width, UINT height, UINT* buf, _OBJECT* obj_list, UINT object_num, _LIGHT* light_list, UINT light_num, _CAMERA* camera) = 0;
++	virtual bool DrawDisplay(UINT width, UINT height, _DISPLAY* display, UINT display_num) = 0;
++};
+\ No newline at end of file
+diff --git a/RenderInterface/OpenGL.cpp b/RenderInterface/OpenGL.cpp
+new file mode 100644
+index 0000000..e073dc7
+--- /dev/null
++++ b/RenderInterface/OpenGL.cpp
+@@ -0,0 +1,66 @@
++#include "OpenGL.h"
++
++TYPE::TYPE _COpenGLRenderer::GetType(){
++	return TYPE::OpenGL;
++}
++
++bool _COpenGLRenderer::Render(
++	UINT width, UINT height, UINT* buf, 
++	_OBJECT* obj_list, UINT object_num, _LIGHT* light_list, UINT light_num, _CAMERA* camera){
++	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
++	glMatrixMode(GL_MODELVIEW);
++	GLfloat view_mat[16] = {
++		camera->view_mat._11,camera->view_mat._12,camera->view_mat._13,camera->view_mat._14,
++		camera->view_mat._21,camera->view_mat._22,camera->view_mat._23,camera->view_mat._24,
++		camera->view_mat._31,camera->view_mat._32,camera->view_mat._33,camera->view_mat._34,
++		camera->view_mat._41,camera->view_mat._42,camera->view_mat._43,camera->view_mat._44
++	};
++	for(UINT i = 0 ; i < object_num ; ++i){
++		GLfloat world_mat[16] = {
++			obj_list[i].world_mat._11,obj_list[i].world_mat._12,obj_list[i].world_mat._13,obj_list[i].world_mat._14,
++			obj_list[i].world_mat._21,obj_list[i].world_mat._22,obj_list[i].world_mat._23,obj_list[i].world_mat._24,
++			obj_list[i].world_mat._31,obj_list[i].world_mat._32,obj_list[i].world_mat._33,obj_list[i].world_mat._34,
++			obj_list[i].world_mat._41,obj_list[i].world_mat._42,obj_list[i].world_mat._43,obj_list[i].world_mat._44};
++		glLoadMatrixf(world_mat);
++		glMultMatrixf(view_mat);
++		glBegin(GL_TRIANGLE_STRIP);
++			for(UINT j = 0; j<obj_list[i].vertex_num ; ++j){
++				glVertex3f(obj_list[i].vertex[j].vertex.x,obj_list[i].vertex[j].vertex.y,obj_list[i].vertex[j].vertex.z);
++			}
++		glEnd();
++	}
++	glMatrixMode(GL_TEXTURE);
++	glMatrixMode(GL_PROJECTION);
++	GLfloat proj_mat[16] = {
++		camera->proj_mat._11,camera->proj_mat._12,camera->proj_mat._13,camera->proj_mat._14,
++		camera->proj_mat._21,camera->proj_mat._22,camera->proj_mat._23,camera->proj_mat._24,
++		camera->proj_mat._31,camera->proj_mat._32,camera->proj_mat._33,camera->proj_mat._34,
++		camera->proj_mat._41,camera->proj_mat._42,camera->proj_mat._43,camera->proj_mat._44
++	};
++	glLoadMatrixf(proj_mat);
++	//glOrtho(-1.0f, 1.0f, -1.0f, 1.0f, -1.0f, 1.0f);
++
++	glReadPixels(0,0,width,height,GL_RGBA,GL_UNSIGNED_BYTE,buf);
++	
++	return true;
++}
++
++bool _COpenGLRenderer::DrawDisplay(UINT width, UINT height, _DISPLAY* display, UINT display_num){
++	glViewport(0,0,width,height);
++	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
++	UINT* buf = new UINT[(width*height)];
++	for(UINT i = 0 ; i<(width*height) ; ++i){
++		buf[i] = 0x00;
++	}
++	for(UINT i = 0 ; i<display_num ; ++i){
++		for(UINT x = display[i].x ; x<width ; ++x){
++			for(UINT y = display[i].y ; y<height ; ++y){
++				buf[(y*width)+x] = display[i].buf[(y*(display[i].width))+x];
++			}
++		}
++	}
++	glDrawPixels(width, height, GL_RGBA, GL_UNSIGNED_BYTE, buf);
++	delete [] buf;
++	glFlush();
++	return true;
++}
+\ No newline at end of file
+diff --git a/RenderInterface/OpenGL.h b/RenderInterface/OpenGL.h
+new file mode 100644
+index 0000000..9f7fd07
+--- /dev/null
++++ b/RenderInterface/OpenGL.h
+@@ -0,0 +1,30 @@
++#pragma once
++
++#include <Windows.h>
++#include <gl\\GL.h>
++#include <gl\\GLU.h>
++
++#pragma comment(lib, "opengl32.lib")
++#pragma comment(lib, "glu32.lib")
++
++#include "Interface.h"
++
++class _COpenGLRenderer : public _CInterface{
++public:
++	_COpenGLRenderer(){
++		glClearColor(1.0f, 0.0f, 1.0f, 1.0f);
++		glDrawBuffer(GL_BACK);
++		glReadBuffer(GL_BACK);
++	}
++	~_COpenGLRenderer(){}
++
++public:
++	TYPE::TYPE GetType();
++	bool Render(UINT width, UINT height, UINT* buf, 
++		_OBJECT* obj_list, UINT object_num, 
++		_LIGHT* light_list, UINT light_num, 
++		_CAMERA* camera);
++	bool DrawDisplay(UINT width, UINT height, _DISPLAY* display, UINT display_num);
++	//load texture
++	//remove texture
++};
+\ No newline at end of file
+diff --git a/RenderInterface/RenderInterface.cpp b/RenderInterface/RenderInterface.cpp
+new file mode 100644
+index 0000000..c72ad11
+--- /dev/null
++++ b/RenderInterface/RenderInterface.cpp
+@@ -0,0 +1,13 @@
++#include "RenderInterface.h"
++
++#include "Interface.h"
++
++bool Render(UINT width, UINT height, UINT* buf, 
++	_OBJECT* obj_list, UINT object_num, 
++	_LIGHT* light_list, UINT light_num, 
++	_CAMERA* camera){
++	return _CInterface::GetSingleton()->Render(width, height, buf, obj_list, object_num, light_list, light_num, camera);
++}
++bool DrawDisplay(UINT width, UINT height, _DISPLAY* display, UINT display_num){
++	return _CInterface::GetSingleton()->DrawDisplay(width, height, display, display_num);
++}
+\ No newline at end of file
+diff --git a/RenderInterface/RenderInterface.h b/RenderInterface/RenderInterface.h
+new file mode 100644
+index 0000000..fbe6923
+--- /dev/null
++++ b/RenderInterface/RenderInterface.h
+@@ -0,0 +1,75 @@
++#pragma once
++
++#ifdef RENDERINTERFACE_EXPORTS
++#define RINTER_API __declspec(dllexport)
++#else
++#define RINTER_API __declspec(dllimport)
++#pragma comment(lib,"..\\Release\\RenderInterface.lib")
++#endif
++
++#include "..\\Text.h"
++
++#define __x86__
++
++#ifdef __x86__
++typedef float			FLOAT;
++typedef int				INT;
++typedef unsigned int	UINT;
++#else
++typedef double				FLOAT
++#define __int64				INT 
++#define unsigned __int64	UINT
++#endif
++
++extern "C"{
++	struct FLOAT4{
++		FLOAT x,y,z,w;
++	};
++	struct FLOAT2{
++		FLOAT x,y;
++	};
++	struct FLOAT4x4{
++		FLOAT _11,_12,_13,_14;
++		FLOAT _21,_22,_23,_24;
++		FLOAT _31,_32,_33,_34;
++		FLOAT _41,_42,_43,_44;
++	};
++}
++
++extern "C"{
++	struct _VERTEX{
++		FLOAT4 vertex;
++		FLOAT4 diffuse;
++		FLOAT4 normal;
++		FLOAT2 textureUV;
++	};
++	struct _OBJECT{
++		_VERTEX* vertex;
++		UINT vertex_num;
++		TEXT* texture;
++		UINT texture_num;
++		FLOAT4x4 world_mat;
++	};
++	struct _LIGHT{
++
++	};
++	struct _CAMERA{
++		FLOAT4x4 view_mat;
++		FLOAT4x4 proj_mat;
++	};
++
++	struct _DISPLAY{
++		UINT x, y;
++		UINT width;
++		UINT height;
++		UINT* buf;
++	};
++}
++
++extern "C"{
++	RINTER_API bool Render(UINT width, UINT height, UINT* buf, 
++		_OBJECT* obj_list, UINT object_num, 
++		_LIGHT* light_list, UINT light_num, 
++		_CAMERA* camera);
++	RINTER_API bool DrawDisplay(UINT width, UINT height, _DISPLAY* display, UINT display_num);
++}
+\ No newline at end of file
+diff --git a/RenderInterface/RenderInterface.vcxproj b/RenderInterface/RenderInterface.vcxproj
+new file mode 100644
+index 0000000..d07cd35
+--- /dev/null
++++ b/RenderInterface/RenderInterface.vcxproj
+@@ -0,0 +1,164 @@
++﻿<?xml version="1.0" encoding="utf-8"?>
++<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <ItemGroup Label="ProjectConfigurations">
++    <ProjectConfiguration Include="Debug|Win32">
++      <Configuration>Debug</Configuration>
++      <Platform>Win32</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Release|Win32">
++      <Configuration>Release</Configuration>
++      <Platform>Win32</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Debug|x64">
++      <Configuration>Debug</Configuration>
++      <Platform>x64</Platform>
++    </ProjectConfiguration>
++    <ProjectConfiguration Include="Release|x64">
++      <Configuration>Release</Configuration>
++      <Platform>x64</Platform>
++    </ProjectConfiguration>
++  </ItemGroup>
++  <PropertyGroup Label="Globals">
++    <ProjectGuid>{D289CE0D-F960-4B76-B22B-5ED339A44954}</ProjectGuid>
++    <Keyword>Win32Proj</Keyword>
++    <RootNamespace>RenderInterface</RootNamespace>
++    <WindowsTargetPlatformVersion>8.1</WindowsTargetPlatformVersion>
++  </PropertyGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
++    <ConfigurationType>DynamicLibrary</ConfigurationType>
++    <UseDebugLibraries>true</UseDebugLibraries>
++    <PlatformToolset>v140</PlatformToolset>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
++    <ConfigurationType>DynamicLibrary</ConfigurationType>
++    <UseDebugLibraries>false</UseDebugLibraries>
++    <PlatformToolset>v140</PlatformToolset>
++    <WholeProgramOptimization>true</WholeProgramOptimization>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
++    <ConfigurationType>DynamicLibrary</ConfigurationType>
++    <UseDebugLibraries>true</UseDebugLibraries>
++    <PlatformToolset>v140</PlatformToolset>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
++    <ConfigurationType>DynamicLibrary</ConfigurationType>
++    <UseDebugLibraries>false</UseDebugLibraries>
++    <PlatformToolset>v140</PlatformToolset>
++    <WholeProgramOptimization>true</WholeProgramOptimization>
++    <CharacterSet>Unicode</CharacterSet>
++  </PropertyGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
++  <ImportGroup Label="ExtensionSettings">
++  </ImportGroup>
++  <ImportGroup Label="Shared">
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
++  </ImportGroup>
++  <PropertyGroup Label="UserMacros" />
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <LinkIncremental>true</LinkIncremental>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <LinkIncremental>true</LinkIncremental>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <LinkIncremental>false</LinkIncremental>
++  </PropertyGroup>
++  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <LinkIncremental>false</LinkIncremental>
++  </PropertyGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
++    <ClCompile>
++      <PrecompiledHeader>
++      </PrecompiledHeader>
++      <WarningLevel>Level3</WarningLevel>
++      <Optimization>Disabled</Optimization>
++      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;_USRDLL;RENDERINTERFACE_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <SDLCheck>true</SDLCheck>
++    </ClCompile>
++    <Link>
++      <SubSystem>Windows</SubSystem>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
++    <ClCompile>
++      <PrecompiledHeader>
++      </PrecompiledHeader>
++      <WarningLevel>Level3</WarningLevel>
++      <Optimization>Disabled</Optimization>
++      <PreprocessorDefinitions>_DEBUG;_WINDOWS;_USRDLL;RENDERINTERFACE_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <SDLCheck>true</SDLCheck>
++    </ClCompile>
++    <Link>
++      <SubSystem>Windows</SubSystem>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <PrecompiledHeader>
++      </PrecompiledHeader>
++      <Optimization>MaxSpeed</Optimization>
++      <FunctionLevelLinking>true</FunctionLevelLinking>
++      <IntrinsicFunctions>true</IntrinsicFunctions>
++      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;RENDERINTERFACE_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <SDLCheck>true</SDLCheck>
++    </ClCompile>
++    <Link>
++      <SubSystem>Windows</SubSystem>
++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
++      <OptimizeReferences>true</OptimizeReferences>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
++    <ClCompile>
++      <WarningLevel>Level3</WarningLevel>
++      <PrecompiledHeader>
++      </PrecompiledHeader>
++      <Optimization>MaxSpeed</Optimization>
++      <FunctionLevelLinking>true</FunctionLevelLinking>
++      <IntrinsicFunctions>true</IntrinsicFunctions>
++      <PreprocessorDefinitions>NDEBUG;_WINDOWS;_USRDLL;RENDERINTERFACE_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
++      <SDLCheck>true</SDLCheck>
++    </ClCompile>
++    <Link>
++      <SubSystem>Windows</SubSystem>
++      <EnableCOMDATFolding>true</EnableCOMDATFolding>
++      <OptimizeReferences>true</OptimizeReferences>
++      <GenerateDebugInformation>true</GenerateDebugInformation>
++    </Link>
++  </ItemDefinitionGroup>
++  <ItemGroup>
++    <ClCompile Include="..\Text.cpp" />
++    <ClCompile Include="dllMain.cpp" />
++    <ClCompile Include="Interface.cpp" />
++    <ClCompile Include="OpenGL.cpp" />
++    <ClCompile Include="RenderInterface.cpp" />
++  </ItemGroup>
++  <ItemGroup>
++    <ClInclude Include="..\Text.h" />
++    <ClInclude Include="Interface.h" />
++    <ClInclude Include="OpenGL.h" />
++    <ClInclude Include="RenderInterface.h" />
++  </ItemGroup>
++  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
++  <ImportGroup Label="ExtensionTargets">
++  </ImportGroup>
++</Project>
+\ No newline at end of file
+diff --git a/RenderInterface/RenderInterface.vcxproj.filters b/RenderInterface/RenderInterface.vcxproj.filters
+new file mode 100644
+index 0000000..6c5df8f
+--- /dev/null
++++ b/RenderInterface/RenderInterface.vcxproj.filters
+@@ -0,0 +1,48 @@
++﻿<?xml version="1.0" encoding="utf-8"?>
++<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
++  <ItemGroup>
++    <Filter Include="소스 파일">
++      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
++      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
++    </Filter>
++    <Filter Include="헤더 파일">
++      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
++      <Extensions>h;hh;hpp;hxx;hm;inl;inc;xsd</Extensions>
++    </Filter>
++    <Filter Include="리소스 파일">
++      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>
++      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>
++    </Filter>
++  </ItemGroup>
++  <ItemGroup>
++    <ClCompile Include="dllMain.cpp">
++      <Filter>소스 파일</Filter>
++    </ClCompile>
++    <ClCompile Include="OpenGL.cpp">
++      <Filter>소스 파일</Filter>
++    </ClCompile>
++    <ClCompile Include="..\Text.cpp">
++      <Filter>소스 파일</Filter>
++    </ClCompile>
++    <ClCompile Include="Interface.cpp">
++      <Filter>소스 파일</Filter>
++    </ClCompile>
++    <ClCompile Include="RenderInterface.cpp">
++      <Filter>소스 파일</Filter>
++    </ClCompile>
++  </ItemGroup>
++  <ItemGroup>
++    <ClInclude Include="RenderInterface.h">
++      <Filter>헤더 파일</Filter>
++    </ClInclude>
++    <ClInclude Include="OpenGL.h">
++      <Filter>헤더 파일</Filter>
++    </ClInclude>
++    <ClInclude Include="Interface.h">
++      <Filter>헤더 파일</Filter>
++    </ClInclude>
++    <ClInclude Include="..\Text.h">
++      <Filter>헤더 파일</Filter>
++    </ClInclude>
++  </ItemGroup>
++</Project>
+\ No newline at end of file
+diff --git a/RenderInterface/dllMain.cpp b/RenderInterface/dllMain.cpp
+new file mode 100644
+index 0000000..31874eb
+--- /dev/null
++++ b/RenderInterface/dllMain.cpp
+@@ -0,0 +1,12 @@
++#include <Windows.h>
++
++#include "Interface.h"
++
++bool WINAPI DllMain(HINSTANCE hInstace, DWORD fdwReason, LPVOID lpReserved) {
++	if (fdwReason == DLL_PROCESS_DETACH) {
++		if(_CInterface::GetSingleton() != 0x00){
++			_CInterface::Destroy();
++		}
++	}
++	return true;
++}
+\ No newline at end of file
+diff --git a/Text.cpp b/Text.cpp
+new file mode 100644
+index 0000000..c4858e1
+--- /dev/null
++++ b/Text.cpp
+@@ -0,0 +1,214 @@
++#include "Text.h"
++
++_Text::_Text(){
++	str = 0x00;
++	length = 0;
++}
++
++_Text::_Text(const char* text){
++	length = 0;
++	const char* t_char = text;
++	while(1){
++		if(*t_char == 0x00){
++			break;
++		}
++		++length;
++		t_char += 1;
++	}
++	str = new char[length+1];
++	for(unsigned int i = 0 ; i<(length+1) ; ++i){
++		str[i] = text[i];
++	}
++}
++
++_Text::~_Text(){
++	if(str != 0x00){
++		delete [] str;
++		str = 0x00;
++	}
++	length = 0;
++}
++
++const char* _Text::operator =(const char* text){
++	if(text == 0x00){
++		if(str != 0x00){
++			delete [] str;
++			str = 0x00;
++		}
++		length = 0;
++	
++		return 0x00;
++	}
++
++	char* t_text = 0x00;
++	unsigned int t_length = 0;
++	
++	while(1){
++		if(text[t_length] == 0x00){
++			break;
++		}
++		++t_length;
++	}
++	t_text = new char[t_length+1];
++	for(unsigned int i = 0 ; i<(t_length+1) ; ++i){
++		t_text[i] = text[i];
++	}
++	
++	if(str != 0x00){
++		delete [] str;
++		str = 0x00;
++	}
++
++	str = t_text;
++	length = t_length;
++
++	return str;
++}
++
++//_Text::operator const char*() const{
++//	return str;
++//}
++
++_Text::operator char*() const{
++	return str;
++}
++
++const unsigned int _Text::GetLength(){
++	return length;
++}
++
++//Compare Type : 2 small / 1 equal / 0 large
++
++int _Text::LengthCompare(_Text* text){
++	if(text == 0x00 || str == 0x00){return -1;}
++	if(length > text->GetLength()){
++		return 0;
++	}
++	else if(length < text->GetLength()){
++		return 2;
++	}
++	else{
++		return 1;
++	}
++}
++
++int _Text::SizeCompare(_Text* text){
++	int comp = LengthCompare(text);
++	if(comp != 1){return comp;}
++	for(unsigned int i = 0 ; i<length ; ++i){
++		if(str[i] == (*text)[i]){continue;}
++		else{
++			if(str[i] > (*text)[i]){
++				return 0;
++			}
++			else{
++				return 2;
++			}
++		}
++	}
++	return 1;
++}
++
++bool _Text::operator ==(_Text& text){
++	const int result = SizeCompare(&text);
++	if(result < 0){return false;}
++	if(result == 1){return true;}
++	else{return false;}
++}
++bool _Text::operator !=(_Text& text){
++	const int result = SizeCompare(&text);
++	if(result < 0){return false;}
++	if(result == 1){return false;}
++	else{return true;}
++}
++bool _Text::operator > (_Text& text){
++	const int result = SizeCompare(&text);
++	if(result < 0){return false;}
++	if(result == 0){return true;}
++	else{return false;}
++}
++bool _Text::operator >=(_Text& text){
++	const int result = SizeCompare(&text);
++	if(result < 0){return false;}
++	if(result == 0 || result == 1){return true;}
++	else{return false;}
++}
++bool _Text::operator < (_Text& text){
++	const int result = SizeCompare(&text);
++	if(result < 0){return false;}
++	if(result == 2){return true;}
++	else{return false;}
++}
++bool _Text::operator <=(_Text& text){
++	const int result = SizeCompare(&text);
++	if(result < 0){return false;}
++	if(result == 2 || result == 1){return true;}
++	else{return false;}
++}
++
++bool _Text::operator ==(const char* text){
++	_Text t_text = text;
++	return operator ==(t_text);
++}
++bool _Text::operator !=(const char* text){
++	_Text t_text = text;
++	return operator !=(t_text);
++}
++bool _Text::operator >=(const char* text){
++	_Text t_text = text;
++	return operator >=(t_text);
++}
++bool _Text::operator <=(const char* text){
++	_Text t_text = text;
++	return operator <=(t_text);
++}
++bool _Text::operator < (const char* text){
++	_Text t_text = text;
++	return operator < (t_text);
++}
++bool _Text::operator > (const char* text){
++	_Text t_text = text;
++	return operator > (t_text);
++}
++
++char* _Text::Search(const char* text, const char type){
++	if(text == 0x00){return 0;}
++	char* adr = 0x00;
++	
++	unsigned int t_length = 0;
++	while(1){
++		if(*(text + t_length) == 0x00){break;}
++		++t_length;
++	}
++
++	if(type == 'n' || type == 'N'){
++		for(unsigned int i = 0 ; i<length ; ++i){
++			if(str[i] == text[0]){
++				for(unsigned int j = 0 ; (j<t_length) && (i+j<length) ; ++j){
++					if(str[i+j] != text[j]){break;}
++					if(j == (t_length-1)){
++						adr = (str+i);
++						break;
++					}
++				}
++			}
++			if(adr != 0x00){break;}
++		}
++	}
++	else if(type == 'r' || type == 'R'){
++		for(int i = length-1 ; i>=0 ; --i){
++			if(str[i] == text[t_length-1]){
++				for(unsigned int j = 0 ; (j<t_length) && (i-j>=0) ; ++j){
++					if(str[i-j] != text[(t_length-1)-j]){break;}
++					if(j == (t_length-1)){
++						adr = (str+(i-j));
++						break;
++					}
++				}
++			}
++			if(adr != 0x00){break;}
++		}
++	}
++
++	return adr;
++}
+\ No newline at end of file
+diff --git a/Text.h b/Text.h
+new file mode 100644
+index 0000000..dd58840
+--- /dev/null
++++ b/Text.h
+@@ -0,0 +1,38 @@
++#pragma once
++
++typedef class _Text{
++private:
++	char* str;
++	unsigned int length;
++
++	int LengthCompare(_Text*);
++	int SizeCompare(_Text*);
++
++public:
++	_Text();
++	_Text(const char* text);
++	~_Text();
++
++	//operator const char*() const;
++	operator char*() const;
++	const unsigned int GetLength();
++
++	const char* operator =(const char* text);
++	
++	bool operator ==(_Text& text);
++	bool operator !=(_Text& text);
++	bool operator < (_Text& text);
++	bool operator <=(_Text& text);
++	bool operator > (_Text& text);
++	bool operator >=(_Text& text);
++
++	bool operator ==(const char* text);
++	bool operator !=(const char* text);
++	bool operator < (const char* text);
++	bool operator <=(const char* text);
++	bool operator > (const char* text);
++	bool operator >=(const char* text);
++	// +
++	char* Search(const char* text, const char type);
++
++}TEXT;
-- 
2.6.1.windows.1

